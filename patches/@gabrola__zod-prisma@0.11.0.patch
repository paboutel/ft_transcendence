diff --git a/dist/zod-prisma.cjs.development.js b/dist/zod-prisma.cjs.development.js
index f99ff24aaa7d258ab29a701e661b086afa61ca2c..44ae6fa986f3284eefda71a84de702f526a02971 100644
--- a/dist/zod-prisma.cjs.development.js
+++ b/dist/zod-prisma.cjs.development.js
@@ -23,6 +23,8 @@ const configSchema = /*#__PURE__*/zod.z.object({
   prismaJsonNullability: /*#__PURE__*/configBoolean.default('true'),
   fileNameCase: /*#__PURE__*/zod.z.enum(['PascalCase', 'camelCase', 'snake_case']).default('PascalCase'),
   enumFile: /*#__PURE__*/zod.z.string().optional(),
+  zenum: /*#__PURE__*/configBoolean.default('false'),
+  zenumPrefix: /*#__PURE__*/zod.z.string().default('z'),
   indentSize: /*#__PURE__*/zod.z.number().default(2),
   indentType: /*#__PURE__*/zod.z.enum(['tab', 'space']).default('space'),
   singleQuote: /*#__PURE__*/configBoolean.default('false'),
@@ -314,6 +316,29 @@ const generateRelatedSchemaForModel = (model, sourceFile, config, _prismaOptions
     }]
   });
 };
+const populateEnumFileWitZodEnum = (enums, sourceFile, prefix) => {
+  sourceFile.addImportDeclaration({
+    kind: tsMorph.StructureKind.ImportDeclaration,
+    namedImports: ['z'],
+    moduleSpecifier: 'zod'
+  });
+  enums.forEach(enumModel => {
+    var _enumModel$name$at;
+    sourceFile.addVariableStatement({
+      declarationKind: tsMorph.VariableDeclarationKind.Const,
+      isExported: true,
+      leadingTrivia: writer => writer.blankLineIfLastNot(),
+      declarations: [{
+        name: prefix + ((_enumModel$name$at = enumModel.name.at(0)) == null ? void 0 : _enumModel$name$at.toUpperCase()) + enumModel.name.substring(1),
+        initializer(writer) {
+          writer.write('z.enum([').newLine();
+          writeArray(writer, enumModel.values.map(field => `"${field.dbName || field.name}",`), true);
+          writer.write('])');
+        }
+      }]
+    });
+  });
+};
 const populateEnumFile = (enums, sourceFile) => {
   enums.forEach(enumModel => {
     sourceFile.addVariableStatement({
@@ -408,6 +433,7 @@ generatorHelper.generatorHandler({
         overwrite: true
       });
       populateEnumFile(enums, enumFile);
+      if (config.zenum) populateEnumFileWitZodEnum(enums, enumFile, config.zenumPrefix);
       enumFile.formatText({
         indentSize: config.indentSize,
         convertTabsToSpaces: config.indentType === 'space',
diff --git a/dist/zod-prisma.cjs.development.js.map b/dist/zod-prisma.cjs.development.js.map
index d3d82441690cc6f065b77a4ba8978aedf55d24d5..8df0c4438cf3a72d0f0031d7f3d1aba981dc1f75 100644
--- a/dist/zod-prisma.cjs.development.js.map
+++ b/dist/zod-prisma.cjs.development.js.map
@@ -1 +1 @@
-{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { SemicolonPreference } from 'typescript';\nimport { z } from 'zod';\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg));\n\nexport const configSchema = z.object({\n  relationModel: configBoolean.default('true').or(z.literal('default')),\n  modelSuffix: z.string().default('Model'),\n  modelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n  useDecimalJs: configBoolean.default('false'),\n  imports: z.string().optional(),\n  prismaJsonNullability: configBoolean.default('true'),\n  fileNameCase: z.enum(['PascalCase', 'camelCase', 'snake_case']).default('PascalCase'),\n  enumFile: z.string().optional(),\n  indentSize: z.number().default(2),\n  indentType: z.enum(['tab', 'space']).default('space'),\n  singleQuote: configBoolean.default('false'),\n  semicolon: z.nativeEnum(SemicolonPreference).default(SemicolonPreference.Insert),\n  trailingCommas: configBoolean.default('true'),\n  ignoreRelationTypes: configBoolean.default('false').optional(),\n  dateTimeSchema: z.enum(['date', 'union', 'transform']).default('date'),\n  nullableType: z.enum(['nullish', 'nullable']).default('nullish'),\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nexport type PrismaOptions = {\n  schemaPath: string;\n  outputPath: string;\n  clientPath: string;\n};\n\nexport type Names = {\n  model: string;\n  related: string;\n};\n","import { DMMF } from '@prisma/generator-helper';\nimport type { CodeBlockWriter } from 'ts-morph';\nimport { Config } from './config';\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n  array.forEach((line) => writer.write(line).conditionalNewLine(newLine));\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n  const formatModelName = (name: string, prefix = '') => {\n    if (modelCase === 'camelCase') {\n      name = name.slice(0, 1).toLowerCase() + name.slice(1);\n    }\n    return `${prefix}${name}${modelSuffix}`;\n  };\n\n  return {\n    modelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n    relatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n      formatModelName(relationModel === 'default' ? name.toString() : `Related${name.toString()}`),\n  };\n};\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n  model.fields.some((field) => field.kind === 'object') && config.relationModel !== false;\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n  return input.reduce((arr, item, idx) => {\n    return idx % size === 0 ? [...arr, [item]] : [...arr.slice(0, -1), [...arr.slice(-1)[0], item]];\n  }, []);\n};\n\nexport const dotSlash = (input: string) => {\n  const converted = input\n    .replace(/^\\\\\\\\\\?\\\\/, '')\n    .replace(/\\\\/g, '/')\n    .replace(/\\/\\/+/g, '/');\n\n  if (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0];\n\n  if (converted.startsWith(`../`)) return converted;\n\n  return './' + converted;\n};\n\nexport const assertNever = (x: never): never => {\n  throw new Error(`Switch block is not exhaustive. Found: ${x}`);\n};\n","import { ArrayTree, parse, stringify } from 'parenthesis';\nimport { chunk } from './util';\n\nexport const getJSDocs = (docString?: string) => {\n  const lines: string[] = [];\n\n  if (docString) {\n    const docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'));\n\n    if (docLines.length) {\n      lines.push('/**');\n      docLines.forEach((dL) => lines.push(` * ${dL}`));\n      lines.push(' */');\n    }\n  }\n\n  return lines;\n};\n\nexport const getZodDocElements = (docString: string) =>\n  docString\n    .split('\\n')\n    .filter((line) => line.trimStart().startsWith('@zod'))\n    .map((line) => line.trimStart().slice(4))\n    .flatMap((line) =>\n      // Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n      chunk(parse(line), 2)\n        .slice(0, -1)\n        .map(\n          ([each, contents]) =>\n            (each as string).replace(/\\)?\\./, '') + `${stringify(contents as ArrayTree)})`\n        )\n    );\n\nexport const computeCustomSchema = (docString: string) => {\n  return getZodDocElements(docString)\n    .find((modifier) => modifier.startsWith('custom('))\n    ?.slice(7)\n    .slice(0, -1);\n};\n\nexport const computeModifiers = (docString: string) => {\n  return getZodDocElements(docString).filter((each) => !each.startsWith('custom('));\n};\n","import type { DMMF } from '@prisma/generator-helper';\nimport { z } from 'zod';\nimport { computeCustomSchema, computeModifiers } from './docs';\nimport { configSchema } from './config';\nimport { assertNever } from './util';\n\nexport const getZodConstructor = ({\n  field,\n  dateType,\n  nullableType,\n  getRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n    name.toString(),\n}: {\n  field: DMMF.Field;\n  dateType: z.infer<typeof configSchema.shape.dateTimeSchema>;\n  nullableType: 'nullable' | 'nullish';\n  getRelatedModelName?: (\n    name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg\n  ) => string;\n}) => {\n  let zodType = 'z.unknown()';\n  let extraModifiers: string[] = [''];\n  if (field.kind === 'scalar') {\n    switch (field.type) {\n      case 'String':\n        zodType = 'z.string()';\n        break;\n      case 'Int':\n        zodType = 'z.number()';\n        extraModifiers.push('int()');\n        break;\n      case 'BigInt':\n        zodType = 'z.bigint()';\n        break;\n      case 'DateTime': {\n        switch (dateType) {\n          case 'date':\n            zodType = 'z.date()';\n            break;\n          case 'union':\n            zodType = 'z.union([z.date(), z.string().datetime()])';\n            break;\n          case 'transform':\n            zodType = 'z.date().transform((v) => v.toISOString()).pipe(z.string().datetime())';\n            break;\n          default:\n            assertNever(dateType);\n            break;\n        }\n        break;\n      }\n      case 'Float':\n        zodType = 'z.number()';\n        break;\n      case 'Decimal':\n        zodType = 'z.number()';\n        break;\n      case 'Json':\n        zodType = 'jsonSchema';\n        break;\n      case 'Boolean':\n        zodType = 'z.boolean()';\n        break;\n      // TODO: Proper type for bytes fields\n      case 'Bytes':\n        zodType = 'z.unknown()';\n        break;\n    }\n  } else if (field.kind === 'enum') {\n    zodType = `z.nativeEnum(${field.type})`;\n  } else if (field.kind === 'object') {\n    zodType = getRelatedModelName(field.type);\n  }\n\n  if (field.isList) extraModifiers.push('array()');\n  if (field.documentation) {\n    zodType = computeCustomSchema(field.documentation) ?? zodType;\n    extraModifiers.push(...computeModifiers(field.documentation));\n  }\n  if (!field.isRequired && field.type !== 'Json') {\n    switch (nullableType) {\n      case 'nullable':\n        extraModifiers.push('nullable()');\n        break;\n      case 'nullish':\n        extraModifiers.push('nullish()');\n        break;\n      default:\n        assertNever(nullableType);\n        break;\n    }\n  }\n  // if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n  return `${zodType}${extraModifiers.join('.')}`;\n};\n","import { DMMF } from '@prisma/generator-helper';\nimport path from 'path';\nimport {\n  ImportDeclarationStructure,\n  SourceFile,\n  StructureKind,\n  VariableDeclarationKind,\n} from 'ts-morph';\nimport { Config, PrismaOptions } from './config';\nimport { getJSDocs } from './docs';\nimport { getZodConstructor } from './types';\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util';\n\nexport const writeImportsForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  { schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n  const { relatedModelName } = useModelNames(config);\n  const importList: ImportDeclarationStructure[] = [\n    {\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['z'],\n      moduleSpecifier: 'zod',\n    },\n  ];\n\n  if (config.imports) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namespaceImport: 'imports',\n      moduleSpecifier: dotSlash(\n        path.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n      ),\n    });\n  }\n\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['Decimal'],\n      moduleSpecifier: 'decimal.js',\n    });\n  }\n\n  const enumFields = model.fields.filter((f) => f.kind === 'enum');\n  const relationFields = model.fields.filter((f) => f.kind === 'object');\n  const relativePath = path.relative(outputPath, clientPath);\n\n  if (enumFields.length > 0) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      isTypeOnly: enumFields.length === 0,\n      moduleSpecifier: dotSlash(config.enumFile || relativePath),\n      namedImports: Array.from(new Set(enumFields.map((f) => f.type))),\n    });\n  }\n\n  if (config.relationModel !== false && relationFields.length > 0) {\n    const filteredFields = relationFields.filter((f) => f.type !== model.name);\n\n    if (filteredFields.length > 0) {\n      importList.push({\n        kind: StructureKind.ImportDeclaration,\n        moduleSpecifier: './index',\n        namedImports: Array.from(\n          new Set(\n            filteredFields.flatMap((f) => [\n              `Complete${f.type}Input`,\n              `Complete${f.type}Output`,\n              relatedModelName(f.type),\n            ])\n          )\n        ),\n      });\n    }\n  }\n\n  sourceFile.addImportDeclarations(importList);\n};\n\nexport const writeTypeSpecificSchemas = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  if (model.fields.some((f) => f.type === 'Json')) {\n    sourceFile.addStatements((writer) => {\n      writer.newLine();\n      writeArray(writer, [\n        '// Helper schema for JSON fields',\n        `type Literal = boolean | number | string${config.prismaJsonNullability ? '' : '| null'}`,\n        'type Json = Literal | { [key: string]: Json } | Json[]',\n        `const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n          config.prismaJsonNullability ? '' : ', z.null()'\n        }])`,\n        'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n      ]);\n    });\n  }\n\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    sourceFile.addStatements((writer) => {\n      writer.newLine();\n      writeArray(writer, [\n        '// Helper schema for Decimal fields',\n        'z',\n        '.instanceof(Decimal)',\n        '.or(z.string())',\n        '.or(z.number())',\n        '.refine((value) => {',\n        '  try {',\n        '    return new Decimal(value);',\n        '  } catch (error) {',\n        '    return false;',\n        '  }',\n        '})',\n        '.transform((value) => new Decimal(value));',\n      ]);\n    });\n  }\n};\n\nexport const generateSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName } = useModelNames(config);\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n    declarations: [\n      {\n        name: modelName(model.name),\n        initializer(writer) {\n          writer\n            .write('z.object(')\n            .inlineBlock(() => {\n              model.fields\n                .filter((f) => f.kind !== 'object')\n                .forEach((field) => {\n                  writeArray(writer, getJSDocs(field.documentation));\n                  writer\n                    .write(\n                      `${field.name}: ${getZodConstructor({\n                        field,\n                        dateType: config.dateTimeSchema,\n                        nullableType: config.nullableType,\n                      })}`\n                    )\n                    .write(',')\n                    .newLine();\n                });\n            })\n            .write(')');\n        },\n      },\n    ],\n  });\n};\n\nexport const generateRelatedSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName, relatedModelName } = useModelNames(config);\n\n  const relationFields = model.fields.filter((f) => f.kind === 'object');\n\n  sourceFile.addInterface({\n    name: `Complete${model.name}Input`,\n    isExported: true,\n    extends: [`z.input<typeof ${modelName(model.name)}>`],\n    properties: relationFields.map((f) => ({\n      hasQuestionToken: !f.isRequired,\n      name: f.name,\n      type: `Complete${f.type}Input${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n    })),\n  });\n\n  sourceFile.addInterface({\n    name: `Complete${model.name}Output`,\n    isExported: true,\n    extends: [`z.infer<typeof ${modelName(model.name)}>`],\n    properties: relationFields.map((f) => ({\n      hasQuestionToken: !f.isRequired,\n      name: f.name,\n      type: `Complete${f.type}Output${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n    })),\n  });\n\n  sourceFile.addStatements((writer) => {\n    const comments = [\n      '',\n      '/**',\n      ` * ${relatedModelName(\n        model.name\n      )} contains all relations on your model in addition to the scalars`,\n      ' *',\n      ' * NOTE: Lazy required in case of potential circular dependencies within schema',\n      ' */',\n    ];\n\n    if (config.ignoreRelationTypes) comments.push('// @ts-ignore');\n    return writeArray(writer, comments);\n  });\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    declarations: [\n      {\n        name: relatedModelName(model.name),\n        type: `z.ZodSchema<Complete${model.name}Output, z.ZodTypeDef, Complete${model.name}Input>`,\n        initializer(writer) {\n          writer\n            .write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n            .inlineBlock(() => {\n              relationFields.forEach((field) => {\n                writeArray(writer, getJSDocs(field.documentation));\n\n                writer\n                  .write(\n                    `${field.name}: ${getZodConstructor({\n                      field,\n                      dateType: config.dateTimeSchema,\n                      nullableType: config.nullableType,\n                      getRelatedModelName: relatedModelName,\n                    })}`\n                  )\n                  .write(',')\n                  .newLine();\n              });\n            })\n            .write('))');\n        },\n      },\n    ],\n  });\n};\n\nexport const populateEnumFile = (enums: DMMF.DatamodelEnum[], sourceFile: SourceFile) => {\n  enums.forEach((enumModel) => {\n    sourceFile.addVariableStatement({\n      declarationKind: VariableDeclarationKind.Const,\n      isExported: true,\n      leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n      declarations: [\n        {\n          name: enumModel.name,\n          initializer(writer) {\n            writer\n              .inlineBlock(() => {\n                enumModel.values.forEach((field) => {\n                  writer\n                    .write(`${field.name}: '${field.dbName || field.name}'`)\n                    .write(',')\n                    .newLine();\n                });\n              })\n              .write(' as const');\n          },\n        },\n      ],\n    });\n  });\n};\n\nexport const populateModelFile = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  prismaOptions: PrismaOptions\n) => {\n  writeImportsForModel(model, sourceFile, config, prismaOptions);\n  writeTypeSpecificSchemas(model, sourceFile, config, prismaOptions);\n  generateSchemaForModel(model, sourceFile, config, prismaOptions);\n  if (needsRelatedModel(model, config)) {\n    generateRelatedSchemaForModel(model, sourceFile, config, prismaOptions);\n  }\n};\n\nexport const generateBarrelFile = (\n  models: DMMF.Model[],\n  indexFile: SourceFile,\n  enumFile?: string | null\n) => {\n  models.forEach((model) =>\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${model.name}`,\n    })\n  );\n\n  if (enumFile) {\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${enumFile}`,\n    });\n  }\n};\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json';\n\nimport { generatorHandler } from '@prisma/generator-helper';\nimport { Project, QuoteKind } from 'ts-morph';\nimport { configSchema, PrismaOptions } from './config';\nimport { generateBarrelFile, populateEnumFile, populateModelFile } from './generator';\n\ngeneratorHandler({\n  onManifest() {\n    return {\n      version,\n      prettyName: 'Zod Schemas',\n      defaultOutput: 'zod',\n    };\n  },\n  onGenerate(options) {\n    const models = options.dmmf.datamodel.models;\n\n    const { schemaPath } = options;\n    const outputPath = options.generator.output!.value!;\n    const clientPath = options.otherGenerators.find(\n      (each) => each.provider.value === 'prisma-client-js'\n    )!.output!.value!;\n\n    const results = configSchema.safeParse(options.generator.config);\n    if (!results.success)\n      throw new Error(\n        'Incorrect config provided. Please check the values you provided and try again.'\n      );\n\n    const config = results.data;\n    const prismaOptions: PrismaOptions = {\n      clientPath,\n      outputPath,\n      schemaPath,\n    };\n\n    const project = new Project({\n      manipulationSettings: {\n        quoteKind: config.singleQuote ? QuoteKind.Single : QuoteKind.Double,\n        useTrailingCommas: config.trailingCommas,\n      },\n    });\n\n    const indexFile = project.createSourceFile(`${outputPath}/index.ts`, {}, { overwrite: true });\n\n    generateBarrelFile(models, indexFile, config.enumFile);\n\n    indexFile.formatText({\n      indentSize: config.indentSize,\n      convertTabsToSpaces: config.indentType === 'space',\n      semicolons: config.semicolon,\n    });\n\n    models.forEach((model) => {\n      const sourceFile = project.createSourceFile(\n        `${outputPath}/${model.name}.ts`,\n        {},\n        { overwrite: true }\n      );\n\n      populateModelFile(model, sourceFile, config, prismaOptions);\n\n      sourceFile.formatText({\n        indentSize: config.indentSize,\n        convertTabsToSpaces: config.indentType === 'space',\n        semicolons: config.semicolon,\n      });\n    });\n\n    if (config.enumFile) {\n      const enums = options.dmmf.datamodel.enums;\n      const enumFile = project.createSourceFile(\n        `${outputPath}/${config.enumFile}.ts`,\n        {},\n        { overwrite: true }\n      );\n      populateEnumFile(enums, enumFile);\n      enumFile.formatText({\n        indentSize: config.indentSize,\n        convertTabsToSpaces: config.indentType === 'space',\n        semicolons: config.semicolon,\n      });\n    }\n\n    return project.save();\n  },\n});\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","fileNameCase","enumFile","indentSize","number","indentType","singleQuote","semicolon","nativeEnum","SemicolonPreference","Insert","trailingCommas","ignoreRelationTypes","dateTimeSchema","nullableType","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","needsRelatedModel","model","config","fields","some","field","kind","chunk","input","size","reduce","arr","item","idx","dotSlash","converted","replace","includes","split","startsWith","assertNever","x","Error","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","each","contents","stringify","computeCustomSchema","find","modifier","computeModifiers","getZodConstructor","dateType","getRelatedModelName","zodType","extraModifiers","type","isList","documentation","isRequired","join","writeImportsForModel","sourceFile","schemaPath","outputPath","clientPath","importList","StructureKind","ImportDeclaration","namedImports","moduleSpecifier","namespaceImport","path","relative","resolve","dirname","f","enumFields","relationFields","relativePath","isTypeOnly","Array","from","Set","filteredFields","addImportDeclarations","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateRelatedSchemaForModel","addInterface","extends","properties","hasQuestionToken","comments","populateEnumFile","enums","enumModel","values","dbName","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","dmmf","datamodel","generator","output","value","otherGenerators","provider","results","safeParse","success","data","project","Project","manipulationSettings","quoteKind","QuoteKind","Single","Double","useTrailingCommas","createSourceFile","overwrite","formatText","convertTabsToSpaces","semicolons","save"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"zod-prisma.cjs.development.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/generator.ts","../src/index.ts"],"sourcesContent":["import { SemicolonPreference } from 'typescript';\nimport { z } from 'zod';\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg));\n\nexport const configSchema = z.object({\n  relationModel: configBoolean.default('true').or(z.literal('default')),\n  modelSuffix: z.string().default('Model'),\n  modelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n  useDecimalJs: configBoolean.default('false'),\n  imports: z.string().optional(),\n  prismaJsonNullability: configBoolean.default('true'),\n  fileNameCase: z.enum(['PascalCase', 'camelCase', 'snake_case']).default('PascalCase'),\n  enumFile: z.string().optional(),\n  zenum: configBoolean.default('false'),\n  zenumPrefix: z.string().default('z'),\n  indentSize: z.number().default(2),\n  indentType: z.enum(['tab', 'space']).default('space'),\n  singleQuote: configBoolean.default('false'),\n  semicolon: z.nativeEnum(SemicolonPreference).default(SemicolonPreference.Insert),\n  trailingCommas: configBoolean.default('true'),\n  ignoreRelationTypes: configBoolean.default('false').optional(),\n  dateTimeSchema: z.enum(['date', 'union', 'transform']).default('date'),\n  nullableType: z.enum(['nullish', 'nullable']).default('nullish'),\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nexport type PrismaOptions = {\n  schemaPath: string;\n  outputPath: string;\n  clientPath: string;\n};\n\nexport type Names = {\n  model: string;\n  related: string;\n};\n","import { DMMF } from '@prisma/generator-helper';\nimport type { CodeBlockWriter } from 'ts-morph';\nimport { Config } from './config';\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n  array.forEach((line) => writer.write(line).conditionalNewLine(newLine));\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n  const formatModelName = (name: string, prefix = '') => {\n    if (modelCase === 'camelCase') {\n      name = name.slice(0, 1).toLowerCase() + name.slice(1);\n    }\n    return `${prefix}${name}${modelSuffix}`;\n  };\n\n  return {\n    modelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n    relatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n      formatModelName(relationModel === 'default' ? name.toString() : `Related${name.toString()}`),\n  };\n};\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n  model.fields.some((field) => field.kind === 'object') && config.relationModel !== false;\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n  return input.reduce((arr, item, idx) => {\n    return idx % size === 0 ? [...arr, [item]] : [...arr.slice(0, -1), [...arr.slice(-1)[0], item]];\n  }, []);\n};\n\nexport const dotSlash = (input: string) => {\n  const converted = input\n    .replace(/^\\\\\\\\\\?\\\\/, '')\n    .replace(/\\\\/g, '/')\n    .replace(/\\/\\/+/g, '/');\n\n  if (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0];\n\n  if (converted.startsWith(`../`)) return converted;\n\n  return './' + converted;\n};\n\nexport const assertNever = (x: never): never => {\n  throw new Error(`Switch block is not exhaustive. Found: ${x}`);\n};\n","import { ArrayTree, parse, stringify } from 'parenthesis';\nimport { chunk } from './util';\n\nexport const getJSDocs = (docString?: string) => {\n  const lines: string[] = [];\n\n  if (docString) {\n    const docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'));\n\n    if (docLines.length) {\n      lines.push('/**');\n      docLines.forEach((dL) => lines.push(` * ${dL}`));\n      lines.push(' */');\n    }\n  }\n\n  return lines;\n};\n\nexport const getZodDocElements = (docString: string) =>\n  docString\n    .split('\\n')\n    .filter((line) => line.trimStart().startsWith('@zod'))\n    .map((line) => line.trimStart().slice(4))\n    .flatMap((line) =>\n      // Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n      chunk(parse(line), 2)\n        .slice(0, -1)\n        .map(\n          ([each, contents]) =>\n            (each as string).replace(/\\)?\\./, '') + `${stringify(contents as ArrayTree)})`\n        )\n    );\n\nexport const computeCustomSchema = (docString: string) => {\n  return getZodDocElements(docString)\n    .find((modifier) => modifier.startsWith('custom('))\n    ?.slice(7)\n    .slice(0, -1);\n};\n\nexport const computeModifiers = (docString: string) => {\n  return getZodDocElements(docString).filter((each) => !each.startsWith('custom('));\n};\n","import type { DMMF } from '@prisma/generator-helper';\nimport { z } from 'zod';\nimport { computeCustomSchema, computeModifiers } from './docs';\nimport { configSchema } from './config';\nimport { assertNever } from './util';\n\nexport const getZodConstructor = ({\n  field,\n  dateType,\n  nullableType,\n  getRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n    name.toString(),\n}: {\n  field: DMMF.Field;\n  dateType: z.infer<typeof configSchema.shape.dateTimeSchema>;\n  nullableType: 'nullable' | 'nullish';\n  getRelatedModelName?: (\n    name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg\n  ) => string;\n}) => {\n  let zodType = 'z.unknown()';\n  let extraModifiers: string[] = [''];\n  if (field.kind === 'scalar') {\n    switch (field.type) {\n      case 'String':\n        zodType = 'z.string()';\n        break;\n      case 'Int':\n        zodType = 'z.number()';\n        extraModifiers.push('int()');\n        break;\n      case 'BigInt':\n        zodType = 'z.bigint()';\n        break;\n      case 'DateTime': {\n        switch (dateType) {\n          case 'date':\n            zodType = 'z.date()';\n            break;\n          case 'union':\n            zodType = 'z.union([z.date(), z.string().datetime()])';\n            break;\n          case 'transform':\n            zodType = 'z.date().transform((v) => v.toISOString()).pipe(z.string().datetime())';\n            break;\n          default:\n            assertNever(dateType);\n            break;\n        }\n        break;\n      }\n      case 'Float':\n        zodType = 'z.number()';\n        break;\n      case 'Decimal':\n        zodType = 'z.number()';\n        break;\n      case 'Json':\n        zodType = 'jsonSchema';\n        break;\n      case 'Boolean':\n        zodType = 'z.boolean()';\n        break;\n      // TODO: Proper type for bytes fields\n      case 'Bytes':\n        zodType = 'z.unknown()';\n        break;\n    }\n  } else if (field.kind === 'enum') {\n    zodType = `z.nativeEnum(${field.type})`;\n  } else if (field.kind === 'object') {\n    zodType = getRelatedModelName(field.type);\n  }\n\n  if (field.isList) extraModifiers.push('array()');\n  if (field.documentation) {\n    zodType = computeCustomSchema(field.documentation) ?? zodType;\n    extraModifiers.push(...computeModifiers(field.documentation));\n  }\n  if (!field.isRequired && field.type !== 'Json') {\n    switch (nullableType) {\n      case 'nullable':\n        extraModifiers.push('nullable()');\n        break;\n      case 'nullish':\n        extraModifiers.push('nullish()');\n        break;\n      default:\n        assertNever(nullableType);\n        break;\n    }\n  }\n  // if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n  return `${zodType}${extraModifiers.join('.')}`;\n};\n","import { DMMF } from '@prisma/generator-helper';\nimport path from 'path';\nimport {\n  ImportDeclarationStructure,\n  SourceFile,\n  StructureKind,\n  VariableDeclarationKind,\n} from 'ts-morph';\nimport { Config, PrismaOptions } from './config';\nimport { getJSDocs } from './docs';\nimport { getZodConstructor } from './types';\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util';\n\nexport const writeImportsForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  { schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n  const { relatedModelName } = useModelNames(config);\n  const importList: ImportDeclarationStructure[] = [\n    {\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['z'],\n      moduleSpecifier: 'zod',\n    },\n  ];\n\n  if (config.imports) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namespaceImport: 'imports',\n      moduleSpecifier: dotSlash(\n        path.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n      ),\n    });\n  }\n\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['Decimal'],\n      moduleSpecifier: 'decimal.js',\n    });\n  }\n\n  const enumFields = model.fields.filter((f) => f.kind === 'enum');\n  const relationFields = model.fields.filter((f) => f.kind === 'object');\n  const relativePath = path.relative(outputPath, clientPath);\n\n  if (enumFields.length > 0) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      isTypeOnly: enumFields.length === 0,\n      moduleSpecifier: dotSlash(config.enumFile || relativePath),\n      namedImports: Array.from(new Set(enumFields.map((f) => f.type))),\n    });\n  }\n\n  if (config.relationModel !== false && relationFields.length > 0) {\n    const filteredFields = relationFields.filter((f) => f.type !== model.name);\n\n    if (filteredFields.length > 0) {\n      importList.push({\n        kind: StructureKind.ImportDeclaration,\n        moduleSpecifier: './index',\n        namedImports: Array.from(\n          new Set(\n            filteredFields.flatMap((f) => [\n              `Complete${f.type}Input`,\n              `Complete${f.type}Output`,\n              relatedModelName(f.type),\n            ])\n          )\n        ),\n      });\n    }\n  }\n\n  sourceFile.addImportDeclarations(importList);\n};\n\nexport const writeTypeSpecificSchemas = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  if (model.fields.some((f) => f.type === 'Json')) {\n    sourceFile.addStatements((writer) => {\n      writer.newLine();\n      writeArray(writer, [\n        '// Helper schema for JSON fields',\n        `type Literal = boolean | number | string${config.prismaJsonNullability ? '' : '| null'}`,\n        'type Json = Literal | { [key: string]: Json } | Json[]',\n        `const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n          config.prismaJsonNullability ? '' : ', z.null()'\n        }])`,\n        'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n      ]);\n    });\n  }\n\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    sourceFile.addStatements((writer) => {\n      writer.newLine();\n      writeArray(writer, [\n        '// Helper schema for Decimal fields',\n        'z',\n        '.instanceof(Decimal)',\n        '.or(z.string())',\n        '.or(z.number())',\n        '.refine((value) => {',\n        '  try {',\n        '    return new Decimal(value);',\n        '  } catch (error) {',\n        '    return false;',\n        '  }',\n        '})',\n        '.transform((value) => new Decimal(value));',\n      ]);\n    });\n  }\n};\n\nexport const generateSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName } = useModelNames(config);\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n    declarations: [\n      {\n        name: modelName(model.name),\n        initializer(writer) {\n          writer\n            .write('z.object(')\n            .inlineBlock(() => {\n              model.fields\n                .filter((f) => f.kind !== 'object')\n                .forEach((field) => {\n                  writeArray(writer, getJSDocs(field.documentation));\n                  writer\n                    .write(\n                      `${field.name}: ${getZodConstructor({\n                        field,\n                        dateType: config.dateTimeSchema,\n                        nullableType: config.nullableType,\n                      })}`\n                    )\n                    .write(',')\n                    .newLine();\n                });\n            })\n            .write(')');\n        },\n      },\n    ],\n  });\n};\n\nexport const generateRelatedSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName, relatedModelName } = useModelNames(config);\n\n  const relationFields = model.fields.filter((f) => f.kind === 'object');\n\n  sourceFile.addInterface({\n    name: `Complete${model.name}Input`,\n    isExported: true,\n    extends: [`z.input<typeof ${modelName(model.name)}>`],\n    properties: relationFields.map((f) => ({\n      hasQuestionToken: !f.isRequired,\n      name: f.name,\n      type: `Complete${f.type}Input${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n    })),\n  });\n\n  sourceFile.addInterface({\n    name: `Complete${model.name}Output`,\n    isExported: true,\n    extends: [`z.infer<typeof ${modelName(model.name)}>`],\n    properties: relationFields.map((f) => ({\n      hasQuestionToken: !f.isRequired,\n      name: f.name,\n      type: `Complete${f.type}Output${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n    })),\n  });\n\n  sourceFile.addStatements((writer) => {\n    const comments = [\n      '',\n      '/**',\n      ` * ${relatedModelName(\n        model.name\n      )} contains all relations on your model in addition to the scalars`,\n      ' *',\n      ' * NOTE: Lazy required in case of potential circular dependencies within schema',\n      ' */',\n    ];\n\n    if (config.ignoreRelationTypes) comments.push('// @ts-ignore');\n    return writeArray(writer, comments);\n  });\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    declarations: [\n      {\n        name: relatedModelName(model.name),\n        type: `z.ZodSchema<Complete${model.name}Output, z.ZodTypeDef, Complete${model.name}Input>`,\n        initializer(writer) {\n          writer\n            .write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n            .inlineBlock(() => {\n              relationFields.forEach((field) => {\n                writeArray(writer, getJSDocs(field.documentation));\n\n                writer\n                  .write(\n                    `${field.name}: ${getZodConstructor({\n                      field,\n                      dateType: config.dateTimeSchema,\n                      nullableType: config.nullableType,\n                      getRelatedModelName: relatedModelName,\n                    })}`\n                  )\n                  .write(',')\n                  .newLine();\n              });\n            })\n            .write('))');\n        },\n      },\n    ],\n  });\n};\n\nexport const populateEnumFileWitZodEnum = (enums: DMMF.DatamodelEnum[], sourceFile: SourceFile, prefix: string) => {\n    sourceFile.addImportDeclaration({\n        kind: StructureKind.ImportDeclaration,\n        namedImports: ['z'],\n        moduleSpecifier: 'zod'\n    })\n\n    enums.forEach((enumModel) => {\n        sourceFile.addVariableStatement({\n          declarationKind: VariableDeclarationKind.Const,\n          isExported: true,\n          leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n          declarations: [\n            {\n                name: prefix + enumModel.name.at(0)?.toUpperCase() + enumModel.name.substring(1),\n                initializer(writer) {\n                    writer.write('z.enum([').newLine()\n                    writeArray(writer, enumModel.values.map(field => `\"${field.dbName || field.name}\",`), true)\n                    writer.write('])')\n              },\n            },\n          ],\n        });\n    })\n}\n\nexport const populateEnumFile = (enums: DMMF.DatamodelEnum[], sourceFile: SourceFile) => {\n  enums.forEach((enumModel) => {\n    sourceFile.addVariableStatement({\n      declarationKind: VariableDeclarationKind.Const,\n      isExported: true,\n      leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n      declarations: [\n        {\n          name: enumModel.name,\n          initializer(writer) {\n            writer\n              .inlineBlock(() => {\n                enumModel.values.forEach((field) => {\n                  writer\n                    .write(`${field.name}: '${field.dbName || field.name}'`)\n                    .write(',')\n                    .newLine();\n                });\n              })\n              .write(' as const');\n          },\n        },\n      ],\n    });\n  });\n};\n\nexport const populateModelFile = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  prismaOptions: PrismaOptions\n) => {\n  writeImportsForModel(model, sourceFile, config, prismaOptions);\n  writeTypeSpecificSchemas(model, sourceFile, config, prismaOptions);\n  generateSchemaForModel(model, sourceFile, config, prismaOptions);\n  if (needsRelatedModel(model, config)) {\n    generateRelatedSchemaForModel(model, sourceFile, config, prismaOptions);\n  }\n};\n\nexport const generateBarrelFile = (\n  models: DMMF.Model[],\n  indexFile: SourceFile,\n  enumFile?: string | null\n) => {\n  models.forEach((model) =>\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${model.name}`,\n    })\n  );\n\n  if (enumFile) {\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${enumFile}`,\n    });\n  }\n};\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json';\n\nimport { generatorHandler } from '@prisma/generator-helper';\nimport { Project, QuoteKind } from 'ts-morph';\nimport { configSchema, PrismaOptions } from './config';\nimport { generateBarrelFile, populateEnumFile, populateEnumFileWitZodEnum, populateModelFile } from './generator';\n\ngeneratorHandler({\n  onManifest() {\n    return {\n      version,\n      prettyName: 'Zod Schemas',\n      defaultOutput: 'zod',\n    };\n  },\n  onGenerate(options) {\n    const models = options.dmmf.datamodel.models;\n\n    const { schemaPath } = options;\n    const outputPath = options.generator.output!.value!;\n    const clientPath = options.otherGenerators.find(\n      (each) => each.provider.value === 'prisma-client-js'\n    )!.output!.value!;\n\n    const results = configSchema.safeParse(options.generator.config);\n    if (!results.success)\n      throw new Error(\n        'Incorrect config provided. Please check the values you provided and try again.'\n      );\n\n    const config = results.data;\n    const prismaOptions: PrismaOptions = {\n      clientPath,\n      outputPath,\n      schemaPath,\n    };\n\n    const project = new Project({\n      manipulationSettings: {\n        quoteKind: config.singleQuote ? QuoteKind.Single : QuoteKind.Double,\n        useTrailingCommas: config.trailingCommas,\n      },\n    });\n\n    const indexFile = project.createSourceFile(`${outputPath}/index.ts`, {}, { overwrite: true });\n\n    generateBarrelFile(models, indexFile, config.enumFile);\n\n    indexFile.formatText({\n      indentSize: config.indentSize,\n      convertTabsToSpaces: config.indentType === 'space',\n      semicolons: config.semicolon,\n    });\n\n    models.forEach((model) => {\n      const sourceFile = project.createSourceFile(\n        `${outputPath}/${model.name}.ts`,\n        {},\n        { overwrite: true }\n      );\n\n      populateModelFile(model, sourceFile, config, prismaOptions);\n\n      sourceFile.formatText({\n        indentSize: config.indentSize,\n        convertTabsToSpaces: config.indentType === 'space',\n        semicolons: config.semicolon,\n      });\n    });\n\n    if (config.enumFile) {\n      const enums = options.dmmf.datamodel.enums;\n      const enumFile = project.createSourceFile(\n        `${outputPath}/${config.enumFile}.ts`,\n        {},\n        { overwrite: true }\n      );\n      populateEnumFile(enums, enumFile);\n      if (config.zenum)\n        populateEnumFileWitZodEnum(enums, enumFile, config.zenumPrefix)\n      enumFile.formatText({\n        indentSize: config.indentSize,\n        convertTabsToSpaces: config.indentType === 'space',\n        semicolons: config.semicolon,\n      });\n    }\n\n    return project.save();\n  },\n});\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","fileNameCase","enumFile","zenum","zenumPrefix","indentSize","number","indentType","singleQuote","semicolon","nativeEnum","SemicolonPreference","Insert","trailingCommas","ignoreRelationTypes","dateTimeSchema","nullableType","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","needsRelatedModel","model","config","fields","some","field","kind","chunk","input","size","reduce","arr","item","idx","dotSlash","converted","replace","includes","split","startsWith","assertNever","x","Error","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","each","contents","stringify","computeCustomSchema","find","modifier","computeModifiers","getZodConstructor","dateType","getRelatedModelName","zodType","extraModifiers","type","isList","documentation","isRequired","join","writeImportsForModel","sourceFile","schemaPath","outputPath","clientPath","importList","StructureKind","ImportDeclaration","namedImports","moduleSpecifier","namespaceImport","path","relative","resolve","dirname","f","enumFields","relationFields","relativePath","isTypeOnly","Array","from","Set","filteredFields","addImportDeclarations","writeTypeSpecificSchemas","_prismaOptions","addStatements","generateSchemaForModel","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateRelatedSchemaForModel","addInterface","extends","properties","hasQuestionToken","comments","populateEnumFileWitZodEnum","enums","addImportDeclaration","enumModel","at","toUpperCase","substring","values","dbName","populateEnumFile","populateModelFile","prismaOptions","generateBarrelFile","models","indexFile","addExportDeclaration","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","dmmf","datamodel","generator","output","value","otherGenerators","provider","results","safeParse","success","data","project","Project","manipulationSettings","quoteKind","QuoteKind","Single","Double","useTrailingCommas","createSourceFile","overwrite","formatText","convertTabsToSpaces","semicolons","save"],"mappings":"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"}
\ No newline at end of file
diff --git a/dist/zod-prisma.cjs.production.min.js b/dist/zod-prisma.cjs.production.min.js
index 14e777fe614bd486d6a8d92fde679ea2d7d6b16f..2bdb0bcf0669e38f6a2785b33d08c89d12386b83 100644
--- a/dist/zod-prisma.cjs.production.min.js
+++ b/dist/zod-prisma.cjs.production.min.js
@@ -1,2 +1,2 @@
-"use strict";var e=require("@prisma/generator-helper"),t=require("ts-morph"),a=require("typescript"),n=require("zod"),i=require("path"),r=require("parenthesis");function l(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=l(i);const s=n.z.enum(["true","false"]).transform((e=>JSON.parse(e))),d=n.z.object({relationModel:s.default("true").or(n.z.literal("default")),modelSuffix:n.z.string().default("Model"),modelCase:n.z.enum(["PascalCase","camelCase"]).default("PascalCase"),useDecimalJs:s.default("false"),imports:n.z.string().optional(),prismaJsonNullability:s.default("true"),fileNameCase:n.z.enum(["PascalCase","camelCase","snake_case"]).default("PascalCase"),enumFile:n.z.string().optional(),indentSize:n.z.number().default(2),indentType:n.z.enum(["tab","space"]).default("space"),singleQuote:s.default("false"),semicolon:n.z.nativeEnum(a.SemicolonPreference).default(a.SemicolonPreference.Insert),trailingCommas:s.default("true"),ignoreRelationTypes:s.default("false").optional(),dateTimeSchema:n.z.enum(["date","union","transform"]).default("date"),nullableType:n.z.enum(["nullish","nullable"]).default("nullish")}),m=(e,t,a=!0)=>t.forEach((t=>e.write(t).conditionalNewLine(a))),c=({modelCase:e,modelSuffix:t,relationModel:a})=>{const n=(a,n="")=>("camelCase"===e&&(a=a.slice(0,1).toLowerCase()+a.slice(1)),`${n}${a}${t}`);return{modelName:e=>n(e,"default"===a?"_":""),relatedModelName:e=>n("default"===a?e.toString():`Related${e.toString()}`)}},u=e=>{const t=e.replace(/^\\\\\?\\/,"").replace(/\\/g,"/").replace(/\/\/+/g,"/");return t.includes("/node_modules/")?t.split("/node_modules/").slice(-1)[0]:t.startsWith("../")?t:"./"+t},p=e=>{throw new Error(`Switch block is not exhaustive. Found: ${e}`)},f=e=>{const t=[];if(e){const a=e.split("\n").filter((e=>!e.trimStart().startsWith("@zod")));a.length&&(t.push("/**"),a.forEach((e=>t.push(` * ${e}`))),t.push(" */"))}return t},h=e=>e.split("\n").filter((e=>e.trimStart().startsWith("@zod"))).map((e=>e.trimStart().slice(4))).flatMap((e=>{return(t=r.parse(e),t.reduce(((e,t,a)=>a%2==0?[...e,[t]]:[...e.slice(0,-1),[...e.slice(-1)[0],t]]),[])).slice(0,-1).map((([e,t])=>e.replace(/\)?\./,"")+`${r.stringify(t)})`));var t})),z=({field:e,dateType:t,nullableType:a,getRelatedModelName:n=(e=>e.toString())})=>{let i="z.unknown()",r=[""];if("scalar"===e.kind)switch(e.type){case"String":i="z.string()";break;case"Int":i="z.number()",r.push("int()");break;case"BigInt":i="z.bigint()";break;case"DateTime":switch(t){case"date":i="z.date()";break;case"union":i="z.union([z.date(), z.string().datetime()])";break;case"transform":i="z.date().transform((v) => v.toISOString()).pipe(z.string().datetime())";break;default:p(t)}break;case"Float":case"Decimal":i="z.number()";break;case"Json":i="jsonSchema";break;case"Boolean":i="z.boolean()";break;case"Bytes":i="z.unknown()"}else"enum"===e.kind?i=`z.nativeEnum(${e.type})`:"object"===e.kind&&(i=n(e.type));var l,o,s;if(e.isList&&r.push("array()"),e.documentation&&(i=null!=(l=null==(o=h(e.documentation).find((e=>e.startsWith("custom("))))?void 0:o.slice(7).slice(0,-1))?l:i,r.push(...(s=e.documentation,h(s).filter((e=>!e.startsWith("custom(")))))),!e.isRequired&&"Json"!==e.type)switch(a){case"nullable":r.push("nullable()");break;case"nullish":r.push("nullish()");break;default:p(a)}return`${i}${r.join(".")}`};e.generatorHandler({onManifest:()=>({version:"0.11.0",prettyName:"Zod Schemas",defaultOutput:"zod"}),onGenerate(e){const a=e.dmmf.datamodel.models,{schemaPath:n}=e,i=e.generator.output.value,r=e.otherGenerators.find((e=>"prisma-client-js"===e.provider.value)).output.value,l=d.safeParse(e.generator.config);if(!l.success)throw new Error("Incorrect config provided. Please check the values you provided and try again.");const s=l.data,p={clientPath:r,outputPath:i,schemaPath:n},h=new t.Project({manipulationSettings:{quoteKind:s.singleQuote?t.QuoteKind.Single:t.QuoteKind.Double,useTrailingCommas:s.trailingCommas}}),S=h.createSourceFile(`${i}/index.ts`,{},{overwrite:!0});if(((e,t,a)=>{e.forEach((e=>t.addExportDeclaration({moduleSpecifier:`./${e.name}`}))),a&&t.addExportDeclaration({moduleSpecifier:`./${a}`})})(a,S,s.enumFile),S.formatText({indentSize:s.indentSize,convertTabsToSpaces:"space"===s.indentType,semicolons:s.semicolon}),a.forEach((e=>{const a=h.createSourceFile(`${i}/${e.name}.ts`,{},{overwrite:!0});((e,a,n,i)=>{((e,a,n,{schemaPath:i,outputPath:r,clientPath:l})=>{const{relatedModelName:s}=c(n),d=[{kind:t.StructureKind.ImportDeclaration,namedImports:["z"],moduleSpecifier:"zod"}];n.imports&&d.push({kind:t.StructureKind.ImportDeclaration,namespaceImport:"imports",moduleSpecifier:u(o.default.relative(r,o.default.resolve(o.default.dirname(i),n.imports)))}),n.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&d.push({kind:t.StructureKind.ImportDeclaration,namedImports:["Decimal"],moduleSpecifier:"decimal.js"});const m=e.fields.filter((e=>"enum"===e.kind)),p=e.fields.filter((e=>"object"===e.kind)),f=o.default.relative(r,l);if(m.length>0&&d.push({kind:t.StructureKind.ImportDeclaration,isTypeOnly:0===m.length,moduleSpecifier:u(n.enumFile||f),namedImports:Array.from(new Set(m.map((e=>e.type))))}),!1!==n.relationModel&&p.length>0){const a=p.filter((t=>t.type!==e.name));a.length>0&&d.push({kind:t.StructureKind.ImportDeclaration,moduleSpecifier:"./index",namedImports:Array.from(new Set(a.flatMap((e=>[`Complete${e.type}Input`,`Complete${e.type}Output`,s(e.type)]))))})}a.addImportDeclarations(d)})(e,a,n,i),((e,t,a,n)=>{e.fields.some((e=>"Json"===e.type))&&t.addStatements((e=>{e.newLine(),m(e,["// Helper schema for JSON fields","type Literal = boolean | number | string"+(a.prismaJsonNullability?"":"| null"),"type Json = Literal | { [key: string]: Json } | Json[]",`const literalSchema = z.union([z.string(), z.number(), z.boolean()${a.prismaJsonNullability?"":", z.null()"}])`,"const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))"])})),a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&t.addStatements((e=>{e.newLine(),m(e,["// Helper schema for Decimal fields","z",".instanceof(Decimal)",".or(z.string())",".or(z.number())",".refine((value) => {","  try {","    return new Decimal(value);","  } catch (error) {","    return false;","  }","})",".transform((value) => new Decimal(value));"])}))})(e,a,n),((e,a,n,i)=>{const{modelName:r}=c(n);a.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),declarations:[{name:r(e.name),initializer(t){t.write("z.object(").inlineBlock((()=>{e.fields.filter((e=>"object"!==e.kind)).forEach((e=>{m(t,f(e.documentation)),t.write(`${e.name}: ${z({field:e,dateType:n.dateTimeSchema,nullableType:n.nullableType})}`).write(",").newLine()}))})).write(")")}}]})})(e,a,n),((e,t)=>e.fields.some((e=>"object"===e.kind))&&!1!==t.relationModel)(e,n)&&((e,a,n,i)=>{const{modelName:r,relatedModelName:l}=c(n),o=e.fields.filter((e=>"object"===e.kind));a.addInterface({name:`Complete${e.name}Input`,isExported:!0,extends:[`z.input<typeof ${r(e.name)}>`],properties:o.map((e=>({hasQuestionToken:!e.isRequired,name:e.name,type:`Complete${e.type}Input${e.isList?"[]":""}${e.isRequired?"":" | null"}`})))}),a.addInterface({name:`Complete${e.name}Output`,isExported:!0,extends:[`z.infer<typeof ${r(e.name)}>`],properties:o.map((e=>({hasQuestionToken:!e.isRequired,name:e.name,type:`Complete${e.type}Output${e.isList?"[]":""}${e.isRequired?"":" | null"}`})))}),a.addStatements((t=>{const a=["","/**",` * ${l(e.name)} contains all relations on your model in addition to the scalars`," *"," * NOTE: Lazy required in case of potential circular dependencies within schema"," */"];return n.ignoreRelationTypes&&a.push("// @ts-ignore"),m(t,a)})),a.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,isExported:!0,declarations:[{name:l(e.name),type:`z.ZodSchema<Complete${e.name}Output, z.ZodTypeDef, Complete${e.name}Input>`,initializer(t){t.write(`z.lazy(() => ${r(e.name)}.extend(`).inlineBlock((()=>{o.forEach((e=>{m(t,f(e.documentation)),t.write(`${e.name}: ${z({field:e,dateType:n.dateTimeSchema,nullableType:n.nullableType,getRelatedModelName:l})}`).write(",").newLine()}))})).write("))")}}]})})(e,a,n)})(e,a,s,p),a.formatText({indentSize:s.indentSize,convertTabsToSpaces:"space"===s.indentType,semicolons:s.semicolon})})),s.enumFile){const a=e.dmmf.datamodel.enums,n=h.createSourceFile(`${i}/${s.enumFile}.ts`,{},{overwrite:!0});((e,a)=>{e.forEach((e=>{a.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),declarations:[{name:e.name,initializer(t){t.inlineBlock((()=>{e.values.forEach((e=>{t.write(`${e.name}: '${e.dbName||e.name}'`).write(",").newLine()}))})).write(" as const")}}]})}))})(a,n),n.formatText({indentSize:s.indentSize,convertTabsToSpaces:"space"===s.indentType,semicolons:s.semicolon})}return h.save()}});
+"use strict";var e=require("@prisma/generator-helper"),t=require("ts-morph"),a=require("typescript"),n=require("zod"),i=require("path"),r=require("parenthesis");function l(e){return e&&"object"==typeof e&&"default"in e?e:{default:e}}var o=l(i);const s=n.z.enum(["true","false"]).transform((e=>JSON.parse(e))),d=n.z.object({relationModel:s.default("true").or(n.z.literal("default")),modelSuffix:n.z.string().default("Model"),modelCase:n.z.enum(["PascalCase","camelCase"]).default("PascalCase"),useDecimalJs:s.default("false"),imports:n.z.string().optional(),prismaJsonNullability:s.default("true"),fileNameCase:n.z.enum(["PascalCase","camelCase","snake_case"]).default("PascalCase"),enumFile:n.z.string().optional(),zenum:s.default("false"),zenumPrefix:n.z.string().default("z"),indentSize:n.z.number().default(2),indentType:n.z.enum(["tab","space"]).default("space"),singleQuote:s.default("false"),semicolon:n.z.nativeEnum(a.SemicolonPreference).default(a.SemicolonPreference.Insert),trailingCommas:s.default("true"),ignoreRelationTypes:s.default("false").optional(),dateTimeSchema:n.z.enum(["date","union","transform"]).default("date"),nullableType:n.z.enum(["nullish","nullable"]).default("nullish")}),m=(e,t,a=!0)=>t.forEach((t=>e.write(t).conditionalNewLine(a))),u=({modelCase:e,modelSuffix:t,relationModel:a})=>{const n=(a,n="")=>("camelCase"===e&&(a=a.slice(0,1).toLowerCase()+a.slice(1)),`${n}${a}${t}`);return{modelName:e=>n(e,"default"===a?"_":""),relatedModelName:e=>n("default"===a?e.toString():`Related${e.toString()}`)}},c=e=>{const t=e.replace(/^\\\\\?\\/,"").replace(/\\/g,"/").replace(/\/\/+/g,"/");return t.includes("/node_modules/")?t.split("/node_modules/").slice(-1)[0]:t.startsWith("../")?t:"./"+t},p=e=>{throw new Error(`Switch block is not exhaustive. Found: ${e}`)},f=e=>{const t=[];if(e){const a=e.split("\n").filter((e=>!e.trimStart().startsWith("@zod")));a.length&&(t.push("/**"),a.forEach((e=>t.push(` * ${e}`))),t.push(" */"))}return t},h=e=>e.split("\n").filter((e=>e.trimStart().startsWith("@zod"))).map((e=>e.trimStart().slice(4))).flatMap((e=>{return(t=r.parse(e),t.reduce(((e,t,a)=>a%2==0?[...e,[t]]:[...e.slice(0,-1),[...e.slice(-1)[0],t]]),[])).slice(0,-1).map((([e,t])=>e.replace(/\)?\./,"")+`${r.stringify(t)})`));var t})),z=({field:e,dateType:t,nullableType:a,getRelatedModelName:n=(e=>e.toString())})=>{let i="z.unknown()",r=[""];if("scalar"===e.kind)switch(e.type){case"String":i="z.string()";break;case"Int":i="z.number()",r.push("int()");break;case"BigInt":i="z.bigint()";break;case"DateTime":switch(t){case"date":i="z.date()";break;case"union":i="z.union([z.date(), z.string().datetime()])";break;case"transform":i="z.date().transform((v) => v.toISOString()).pipe(z.string().datetime())";break;default:p(t)}break;case"Float":case"Decimal":i="z.number()";break;case"Json":i="jsonSchema";break;case"Boolean":i="z.boolean()";break;case"Bytes":i="z.unknown()"}else"enum"===e.kind?i=`z.nativeEnum(${e.type})`:"object"===e.kind&&(i=n(e.type));var l,o,s;if(e.isList&&r.push("array()"),e.documentation&&(i=null!=(l=null==(o=h(e.documentation).find((e=>e.startsWith("custom("))))?void 0:o.slice(7).slice(0,-1))?l:i,r.push(...(s=e.documentation,h(s).filter((e=>!e.startsWith("custom(")))))),!e.isRequired&&"Json"!==e.type)switch(a){case"nullable":r.push("nullable()");break;case"nullish":r.push("nullish()");break;default:p(a)}return`${i}${r.join(".")}`};e.generatorHandler({onManifest:()=>({version:"0.11.0",prettyName:"Zod Schemas",defaultOutput:"zod"}),onGenerate(e){const a=e.dmmf.datamodel.models,{schemaPath:n}=e,i=e.generator.output.value,r=e.otherGenerators.find((e=>"prisma-client-js"===e.provider.value)).output.value,l=d.safeParse(e.generator.config);if(!l.success)throw new Error("Incorrect config provided. Please check the values you provided and try again.");const s=l.data,p={clientPath:r,outputPath:i,schemaPath:n},h=new t.Project({manipulationSettings:{quoteKind:s.singleQuote?t.QuoteKind.Single:t.QuoteKind.Double,useTrailingCommas:s.trailingCommas}}),S=h.createSourceFile(`${i}/index.ts`,{},{overwrite:!0});if(((e,t,a)=>{e.forEach((e=>t.addExportDeclaration({moduleSpecifier:`./${e.name}`}))),a&&t.addExportDeclaration({moduleSpecifier:`./${a}`})})(a,S,s.enumFile),S.formatText({indentSize:s.indentSize,convertTabsToSpaces:"space"===s.indentType,semicolons:s.semicolon}),a.forEach((e=>{const a=h.createSourceFile(`${i}/${e.name}.ts`,{},{overwrite:!0});((e,a,n,i)=>{((e,a,n,{schemaPath:i,outputPath:r,clientPath:l})=>{const{relatedModelName:s}=u(n),d=[{kind:t.StructureKind.ImportDeclaration,namedImports:["z"],moduleSpecifier:"zod"}];n.imports&&d.push({kind:t.StructureKind.ImportDeclaration,namespaceImport:"imports",moduleSpecifier:c(o.default.relative(r,o.default.resolve(o.default.dirname(i),n.imports)))}),n.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&d.push({kind:t.StructureKind.ImportDeclaration,namedImports:["Decimal"],moduleSpecifier:"decimal.js"});const m=e.fields.filter((e=>"enum"===e.kind)),p=e.fields.filter((e=>"object"===e.kind)),f=o.default.relative(r,l);if(m.length>0&&d.push({kind:t.StructureKind.ImportDeclaration,isTypeOnly:0===m.length,moduleSpecifier:c(n.enumFile||f),namedImports:Array.from(new Set(m.map((e=>e.type))))}),!1!==n.relationModel&&p.length>0){const a=p.filter((t=>t.type!==e.name));a.length>0&&d.push({kind:t.StructureKind.ImportDeclaration,moduleSpecifier:"./index",namedImports:Array.from(new Set(a.flatMap((e=>[`Complete${e.type}Input`,`Complete${e.type}Output`,s(e.type)]))))})}a.addImportDeclarations(d)})(e,a,n,i),((e,t,a,n)=>{e.fields.some((e=>"Json"===e.type))&&t.addStatements((e=>{e.newLine(),m(e,["// Helper schema for JSON fields","type Literal = boolean | number | string"+(a.prismaJsonNullability?"":"| null"),"type Json = Literal | { [key: string]: Json } | Json[]",`const literalSchema = z.union([z.string(), z.number(), z.boolean()${a.prismaJsonNullability?"":", z.null()"}])`,"const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))"])})),a.useDecimalJs&&e.fields.some((e=>"Decimal"===e.type))&&t.addStatements((e=>{e.newLine(),m(e,["// Helper schema for Decimal fields","z",".instanceof(Decimal)",".or(z.string())",".or(z.number())",".refine((value) => {","  try {","    return new Decimal(value);","  } catch (error) {","    return false;","  }","})",".transform((value) => new Decimal(value));"])}))})(e,a,n),((e,a,n,i)=>{const{modelName:r}=u(n);a.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),declarations:[{name:r(e.name),initializer(t){t.write("z.object(").inlineBlock((()=>{e.fields.filter((e=>"object"!==e.kind)).forEach((e=>{m(t,f(e.documentation)),t.write(`${e.name}: ${z({field:e,dateType:n.dateTimeSchema,nullableType:n.nullableType})}`).write(",").newLine()}))})).write(")")}}]})})(e,a,n),((e,t)=>e.fields.some((e=>"object"===e.kind))&&!1!==t.relationModel)(e,n)&&((e,a,n,i)=>{const{modelName:r,relatedModelName:l}=u(n),o=e.fields.filter((e=>"object"===e.kind));a.addInterface({name:`Complete${e.name}Input`,isExported:!0,extends:[`z.input<typeof ${r(e.name)}>`],properties:o.map((e=>({hasQuestionToken:!e.isRequired,name:e.name,type:`Complete${e.type}Input${e.isList?"[]":""}${e.isRequired?"":" | null"}`})))}),a.addInterface({name:`Complete${e.name}Output`,isExported:!0,extends:[`z.infer<typeof ${r(e.name)}>`],properties:o.map((e=>({hasQuestionToken:!e.isRequired,name:e.name,type:`Complete${e.type}Output${e.isList?"[]":""}${e.isRequired?"":" | null"}`})))}),a.addStatements((t=>{const a=["","/**",` * ${l(e.name)} contains all relations on your model in addition to the scalars`," *"," * NOTE: Lazy required in case of potential circular dependencies within schema"," */"];return n.ignoreRelationTypes&&a.push("// @ts-ignore"),m(t,a)})),a.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,isExported:!0,declarations:[{name:l(e.name),type:`z.ZodSchema<Complete${e.name}Output, z.ZodTypeDef, Complete${e.name}Input>`,initializer(t){t.write(`z.lazy(() => ${r(e.name)}.extend(`).inlineBlock((()=>{o.forEach((e=>{m(t,f(e.documentation)),t.write(`${e.name}: ${z({field:e,dateType:n.dateTimeSchema,nullableType:n.nullableType,getRelatedModelName:l})}`).write(",").newLine()}))})).write("))")}}]})})(e,a,n)})(e,a,s,p),a.formatText({indentSize:s.indentSize,convertTabsToSpaces:"space"===s.indentType,semicolons:s.semicolon})})),s.enumFile){const a=e.dmmf.datamodel.enums,n=h.createSourceFile(`${i}/${s.enumFile}.ts`,{},{overwrite:!0});((e,a)=>{e.forEach((e=>{a.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),declarations:[{name:e.name,initializer(t){t.inlineBlock((()=>{e.values.forEach((e=>{t.write(`${e.name}: '${e.dbName||e.name}'`).write(",").newLine()}))})).write(" as const")}}]})}))})(a,n),s.zenum&&((e,a,n)=>{a.addImportDeclaration({kind:t.StructureKind.ImportDeclaration,namedImports:["z"],moduleSpecifier:"zod"}),e.forEach((e=>{var i;a.addVariableStatement({declarationKind:t.VariableDeclarationKind.Const,isExported:!0,leadingTrivia:e=>e.blankLineIfLastNot(),declarations:[{name:n+(null==(i=e.name.at(0))?void 0:i.toUpperCase())+e.name.substring(1),initializer(t){t.write("z.enum([").newLine(),m(t,e.values.map((e=>`"${e.dbName||e.name}",`)),!0),t.write("])")}}]})}))})(a,n,s.zenumPrefix),n.formatText({indentSize:s.indentSize,convertTabsToSpaces:"space"===s.indentType,semicolons:s.semicolon})}return h.save()}});
 //# sourceMappingURL=zod-prisma.cjs.production.min.js.map
diff --git a/dist/zod-prisma.cjs.production.min.js.map b/dist/zod-prisma.cjs.production.min.js.map
index 9c9a37ba616a2bcad78618e0ce192ef2e7fc5c66..8d7ad9c688320bdf25e8160160165760451e0bad 100644
--- a/dist/zod-prisma.cjs.production.min.js.map
+++ b/dist/zod-prisma.cjs.production.min.js.map
@@ -1 +1 @@
-{"version":3,"file":"zod-prisma.cjs.production.min.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/index.ts","../src/generator.ts"],"sourcesContent":["import { SemicolonPreference } from 'typescript';\nimport { z } from 'zod';\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg));\n\nexport const configSchema = z.object({\n  relationModel: configBoolean.default('true').or(z.literal('default')),\n  modelSuffix: z.string().default('Model'),\n  modelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n  useDecimalJs: configBoolean.default('false'),\n  imports: z.string().optional(),\n  prismaJsonNullability: configBoolean.default('true'),\n  fileNameCase: z.enum(['PascalCase', 'camelCase', 'snake_case']).default('PascalCase'),\n  enumFile: z.string().optional(),\n  indentSize: z.number().default(2),\n  indentType: z.enum(['tab', 'space']).default('space'),\n  singleQuote: configBoolean.default('false'),\n  semicolon: z.nativeEnum(SemicolonPreference).default(SemicolonPreference.Insert),\n  trailingCommas: configBoolean.default('true'),\n  ignoreRelationTypes: configBoolean.default('false').optional(),\n  dateTimeSchema: z.enum(['date', 'union', 'transform']).default('date'),\n  nullableType: z.enum(['nullish', 'nullable']).default('nullish'),\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nexport type PrismaOptions = {\n  schemaPath: string;\n  outputPath: string;\n  clientPath: string;\n};\n\nexport type Names = {\n  model: string;\n  related: string;\n};\n","import { DMMF } from '@prisma/generator-helper';\nimport type { CodeBlockWriter } from 'ts-morph';\nimport { Config } from './config';\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n  array.forEach((line) => writer.write(line).conditionalNewLine(newLine));\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n  const formatModelName = (name: string, prefix = '') => {\n    if (modelCase === 'camelCase') {\n      name = name.slice(0, 1).toLowerCase() + name.slice(1);\n    }\n    return `${prefix}${name}${modelSuffix}`;\n  };\n\n  return {\n    modelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n    relatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n      formatModelName(relationModel === 'default' ? name.toString() : `Related${name.toString()}`),\n  };\n};\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n  model.fields.some((field) => field.kind === 'object') && config.relationModel !== false;\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n  return input.reduce((arr, item, idx) => {\n    return idx % size === 0 ? [...arr, [item]] : [...arr.slice(0, -1), [...arr.slice(-1)[0], item]];\n  }, []);\n};\n\nexport const dotSlash = (input: string) => {\n  const converted = input\n    .replace(/^\\\\\\\\\\?\\\\/, '')\n    .replace(/\\\\/g, '/')\n    .replace(/\\/\\/+/g, '/');\n\n  if (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0];\n\n  if (converted.startsWith(`../`)) return converted;\n\n  return './' + converted;\n};\n\nexport const assertNever = (x: never): never => {\n  throw new Error(`Switch block is not exhaustive. Found: ${x}`);\n};\n","import { ArrayTree, parse, stringify } from 'parenthesis';\nimport { chunk } from './util';\n\nexport const getJSDocs = (docString?: string) => {\n  const lines: string[] = [];\n\n  if (docString) {\n    const docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'));\n\n    if (docLines.length) {\n      lines.push('/**');\n      docLines.forEach((dL) => lines.push(` * ${dL}`));\n      lines.push(' */');\n    }\n  }\n\n  return lines;\n};\n\nexport const getZodDocElements = (docString: string) =>\n  docString\n    .split('\\n')\n    .filter((line) => line.trimStart().startsWith('@zod'))\n    .map((line) => line.trimStart().slice(4))\n    .flatMap((line) =>\n      // Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n      chunk(parse(line), 2)\n        .slice(0, -1)\n        .map(\n          ([each, contents]) =>\n            (each as string).replace(/\\)?\\./, '') + `${stringify(contents as ArrayTree)})`\n        )\n    );\n\nexport const computeCustomSchema = (docString: string) => {\n  return getZodDocElements(docString)\n    .find((modifier) => modifier.startsWith('custom('))\n    ?.slice(7)\n    .slice(0, -1);\n};\n\nexport const computeModifiers = (docString: string) => {\n  return getZodDocElements(docString).filter((each) => !each.startsWith('custom('));\n};\n","import type { DMMF } from '@prisma/generator-helper';\nimport { z } from 'zod';\nimport { computeCustomSchema, computeModifiers } from './docs';\nimport { configSchema } from './config';\nimport { assertNever } from './util';\n\nexport const getZodConstructor = ({\n  field,\n  dateType,\n  nullableType,\n  getRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n    name.toString(),\n}: {\n  field: DMMF.Field;\n  dateType: z.infer<typeof configSchema.shape.dateTimeSchema>;\n  nullableType: 'nullable' | 'nullish';\n  getRelatedModelName?: (\n    name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg\n  ) => string;\n}) => {\n  let zodType = 'z.unknown()';\n  let extraModifiers: string[] = [''];\n  if (field.kind === 'scalar') {\n    switch (field.type) {\n      case 'String':\n        zodType = 'z.string()';\n        break;\n      case 'Int':\n        zodType = 'z.number()';\n        extraModifiers.push('int()');\n        break;\n      case 'BigInt':\n        zodType = 'z.bigint()';\n        break;\n      case 'DateTime': {\n        switch (dateType) {\n          case 'date':\n            zodType = 'z.date()';\n            break;\n          case 'union':\n            zodType = 'z.union([z.date(), z.string().datetime()])';\n            break;\n          case 'transform':\n            zodType = 'z.date().transform((v) => v.toISOString()).pipe(z.string().datetime())';\n            break;\n          default:\n            assertNever(dateType);\n            break;\n        }\n        break;\n      }\n      case 'Float':\n        zodType = 'z.number()';\n        break;\n      case 'Decimal':\n        zodType = 'z.number()';\n        break;\n      case 'Json':\n        zodType = 'jsonSchema';\n        break;\n      case 'Boolean':\n        zodType = 'z.boolean()';\n        break;\n      // TODO: Proper type for bytes fields\n      case 'Bytes':\n        zodType = 'z.unknown()';\n        break;\n    }\n  } else if (field.kind === 'enum') {\n    zodType = `z.nativeEnum(${field.type})`;\n  } else if (field.kind === 'object') {\n    zodType = getRelatedModelName(field.type);\n  }\n\n  if (field.isList) extraModifiers.push('array()');\n  if (field.documentation) {\n    zodType = computeCustomSchema(field.documentation) ?? zodType;\n    extraModifiers.push(...computeModifiers(field.documentation));\n  }\n  if (!field.isRequired && field.type !== 'Json') {\n    switch (nullableType) {\n      case 'nullable':\n        extraModifiers.push('nullable()');\n        break;\n      case 'nullish':\n        extraModifiers.push('nullish()');\n        break;\n      default:\n        assertNever(nullableType);\n        break;\n    }\n  }\n  // if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n  return `${zodType}${extraModifiers.join('.')}`;\n};\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json';\n\nimport { generatorHandler } from '@prisma/generator-helper';\nimport { Project, QuoteKind } from 'ts-morph';\nimport { configSchema, PrismaOptions } from './config';\nimport { generateBarrelFile, populateEnumFile, populateModelFile } from './generator';\n\ngeneratorHandler({\n  onManifest() {\n    return {\n      version,\n      prettyName: 'Zod Schemas',\n      defaultOutput: 'zod',\n    };\n  },\n  onGenerate(options) {\n    const models = options.dmmf.datamodel.models;\n\n    const { schemaPath } = options;\n    const outputPath = options.generator.output!.value!;\n    const clientPath = options.otherGenerators.find(\n      (each) => each.provider.value === 'prisma-client-js'\n    )!.output!.value!;\n\n    const results = configSchema.safeParse(options.generator.config);\n    if (!results.success)\n      throw new Error(\n        'Incorrect config provided. Please check the values you provided and try again.'\n      );\n\n    const config = results.data;\n    const prismaOptions: PrismaOptions = {\n      clientPath,\n      outputPath,\n      schemaPath,\n    };\n\n    const project = new Project({\n      manipulationSettings: {\n        quoteKind: config.singleQuote ? QuoteKind.Single : QuoteKind.Double,\n        useTrailingCommas: config.trailingCommas,\n      },\n    });\n\n    const indexFile = project.createSourceFile(`${outputPath}/index.ts`, {}, { overwrite: true });\n\n    generateBarrelFile(models, indexFile, config.enumFile);\n\n    indexFile.formatText({\n      indentSize: config.indentSize,\n      convertTabsToSpaces: config.indentType === 'space',\n      semicolons: config.semicolon,\n    });\n\n    models.forEach((model) => {\n      const sourceFile = project.createSourceFile(\n        `${outputPath}/${model.name}.ts`,\n        {},\n        { overwrite: true }\n      );\n\n      populateModelFile(model, sourceFile, config, prismaOptions);\n\n      sourceFile.formatText({\n        indentSize: config.indentSize,\n        convertTabsToSpaces: config.indentType === 'space',\n        semicolons: config.semicolon,\n      });\n    });\n\n    if (config.enumFile) {\n      const enums = options.dmmf.datamodel.enums;\n      const enumFile = project.createSourceFile(\n        `${outputPath}/${config.enumFile}.ts`,\n        {},\n        { overwrite: true }\n      );\n      populateEnumFile(enums, enumFile);\n      enumFile.formatText({\n        indentSize: config.indentSize,\n        convertTabsToSpaces: config.indentType === 'space',\n        semicolons: config.semicolon,\n      });\n    }\n\n    return project.save();\n  },\n});\n","import { DMMF } from '@prisma/generator-helper';\nimport path from 'path';\nimport {\n  ImportDeclarationStructure,\n  SourceFile,\n  StructureKind,\n  VariableDeclarationKind,\n} from 'ts-morph';\nimport { Config, PrismaOptions } from './config';\nimport { getJSDocs } from './docs';\nimport { getZodConstructor } from './types';\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util';\n\nexport const writeImportsForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  { schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n  const { relatedModelName } = useModelNames(config);\n  const importList: ImportDeclarationStructure[] = [\n    {\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['z'],\n      moduleSpecifier: 'zod',\n    },\n  ];\n\n  if (config.imports) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namespaceImport: 'imports',\n      moduleSpecifier: dotSlash(\n        path.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n      ),\n    });\n  }\n\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['Decimal'],\n      moduleSpecifier: 'decimal.js',\n    });\n  }\n\n  const enumFields = model.fields.filter((f) => f.kind === 'enum');\n  const relationFields = model.fields.filter((f) => f.kind === 'object');\n  const relativePath = path.relative(outputPath, clientPath);\n\n  if (enumFields.length > 0) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      isTypeOnly: enumFields.length === 0,\n      moduleSpecifier: dotSlash(config.enumFile || relativePath),\n      namedImports: Array.from(new Set(enumFields.map((f) => f.type))),\n    });\n  }\n\n  if (config.relationModel !== false && relationFields.length > 0) {\n    const filteredFields = relationFields.filter((f) => f.type !== model.name);\n\n    if (filteredFields.length > 0) {\n      importList.push({\n        kind: StructureKind.ImportDeclaration,\n        moduleSpecifier: './index',\n        namedImports: Array.from(\n          new Set(\n            filteredFields.flatMap((f) => [\n              `Complete${f.type}Input`,\n              `Complete${f.type}Output`,\n              relatedModelName(f.type),\n            ])\n          )\n        ),\n      });\n    }\n  }\n\n  sourceFile.addImportDeclarations(importList);\n};\n\nexport const writeTypeSpecificSchemas = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  if (model.fields.some((f) => f.type === 'Json')) {\n    sourceFile.addStatements((writer) => {\n      writer.newLine();\n      writeArray(writer, [\n        '// Helper schema for JSON fields',\n        `type Literal = boolean | number | string${config.prismaJsonNullability ? '' : '| null'}`,\n        'type Json = Literal | { [key: string]: Json } | Json[]',\n        `const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n          config.prismaJsonNullability ? '' : ', z.null()'\n        }])`,\n        'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n      ]);\n    });\n  }\n\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    sourceFile.addStatements((writer) => {\n      writer.newLine();\n      writeArray(writer, [\n        '// Helper schema for Decimal fields',\n        'z',\n        '.instanceof(Decimal)',\n        '.or(z.string())',\n        '.or(z.number())',\n        '.refine((value) => {',\n        '  try {',\n        '    return new Decimal(value);',\n        '  } catch (error) {',\n        '    return false;',\n        '  }',\n        '})',\n        '.transform((value) => new Decimal(value));',\n      ]);\n    });\n  }\n};\n\nexport const generateSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName } = useModelNames(config);\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n    declarations: [\n      {\n        name: modelName(model.name),\n        initializer(writer) {\n          writer\n            .write('z.object(')\n            .inlineBlock(() => {\n              model.fields\n                .filter((f) => f.kind !== 'object')\n                .forEach((field) => {\n                  writeArray(writer, getJSDocs(field.documentation));\n                  writer\n                    .write(\n                      `${field.name}: ${getZodConstructor({\n                        field,\n                        dateType: config.dateTimeSchema,\n                        nullableType: config.nullableType,\n                      })}`\n                    )\n                    .write(',')\n                    .newLine();\n                });\n            })\n            .write(')');\n        },\n      },\n    ],\n  });\n};\n\nexport const generateRelatedSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName, relatedModelName } = useModelNames(config);\n\n  const relationFields = model.fields.filter((f) => f.kind === 'object');\n\n  sourceFile.addInterface({\n    name: `Complete${model.name}Input`,\n    isExported: true,\n    extends: [`z.input<typeof ${modelName(model.name)}>`],\n    properties: relationFields.map((f) => ({\n      hasQuestionToken: !f.isRequired,\n      name: f.name,\n      type: `Complete${f.type}Input${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n    })),\n  });\n\n  sourceFile.addInterface({\n    name: `Complete${model.name}Output`,\n    isExported: true,\n    extends: [`z.infer<typeof ${modelName(model.name)}>`],\n    properties: relationFields.map((f) => ({\n      hasQuestionToken: !f.isRequired,\n      name: f.name,\n      type: `Complete${f.type}Output${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n    })),\n  });\n\n  sourceFile.addStatements((writer) => {\n    const comments = [\n      '',\n      '/**',\n      ` * ${relatedModelName(\n        model.name\n      )} contains all relations on your model in addition to the scalars`,\n      ' *',\n      ' * NOTE: Lazy required in case of potential circular dependencies within schema',\n      ' */',\n    ];\n\n    if (config.ignoreRelationTypes) comments.push('// @ts-ignore');\n    return writeArray(writer, comments);\n  });\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    declarations: [\n      {\n        name: relatedModelName(model.name),\n        type: `z.ZodSchema<Complete${model.name}Output, z.ZodTypeDef, Complete${model.name}Input>`,\n        initializer(writer) {\n          writer\n            .write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n            .inlineBlock(() => {\n              relationFields.forEach((field) => {\n                writeArray(writer, getJSDocs(field.documentation));\n\n                writer\n                  .write(\n                    `${field.name}: ${getZodConstructor({\n                      field,\n                      dateType: config.dateTimeSchema,\n                      nullableType: config.nullableType,\n                      getRelatedModelName: relatedModelName,\n                    })}`\n                  )\n                  .write(',')\n                  .newLine();\n              });\n            })\n            .write('))');\n        },\n      },\n    ],\n  });\n};\n\nexport const populateEnumFile = (enums: DMMF.DatamodelEnum[], sourceFile: SourceFile) => {\n  enums.forEach((enumModel) => {\n    sourceFile.addVariableStatement({\n      declarationKind: VariableDeclarationKind.Const,\n      isExported: true,\n      leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n      declarations: [\n        {\n          name: enumModel.name,\n          initializer(writer) {\n            writer\n              .inlineBlock(() => {\n                enumModel.values.forEach((field) => {\n                  writer\n                    .write(`${field.name}: '${field.dbName || field.name}'`)\n                    .write(',')\n                    .newLine();\n                });\n              })\n              .write(' as const');\n          },\n        },\n      ],\n    });\n  });\n};\n\nexport const populateModelFile = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  prismaOptions: PrismaOptions\n) => {\n  writeImportsForModel(model, sourceFile, config, prismaOptions);\n  writeTypeSpecificSchemas(model, sourceFile, config, prismaOptions);\n  generateSchemaForModel(model, sourceFile, config, prismaOptions);\n  if (needsRelatedModel(model, config)) {\n    generateRelatedSchemaForModel(model, sourceFile, config, prismaOptions);\n  }\n};\n\nexport const generateBarrelFile = (\n  models: DMMF.Model[],\n  indexFile: SourceFile,\n  enumFile?: string | null\n) => {\n  models.forEach((model) =>\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${model.name}`,\n    })\n  );\n\n  if (enumFile) {\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${enumFile}`,\n    });\n  }\n};\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","fileNameCase","enumFile","indentSize","number","indentType","singleQuote","semicolon","nativeEnum","SemicolonPreference","Insert","trailingCommas","ignoreRelationTypes","dateTimeSchema","nullableType","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","dotSlash","input","converted","replace","includes","split","startsWith","assertNever","x","Error","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","chunk","reduce","arr","item","idx","each","contents","stringify","getZodConstructor","field","dateType","getRelatedModelName","zodType","extraModifiers","kind","type","_computeCustomSchema","_getZodDocElements$fi","isList","documentation","find","modifier","isRequired","join","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","models","dmmf","datamodel","schemaPath","outputPath","generator","output","value","clientPath","otherGenerators","provider","results","safeParse","config","success","data","prismaOptions","project","Project","manipulationSettings","quoteKind","QuoteKind","Single","Double","useTrailingCommas","indexFile","createSourceFile","overwrite","model","addExportDeclaration","moduleSpecifier","generateBarrelFile","formatText","convertTabsToSpaces","semicolons","sourceFile","importList","StructureKind","ImportDeclaration","namedImports","namespaceImport","path","relative","resolve","dirname","fields","some","f","enumFields","relationFields","relativePath","isTypeOnly","Array","from","Set","filteredFields","addImportDeclarations","writeImportsForModel","_prismaOptions","addStatements","writeTypeSpecificSchemas","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateSchemaForModel","needsRelatedModel","addInterface","extends","properties","hasQuestionToken","comments","generateRelatedSchemaForModel","populateModelFile","enums","enumModel","values","dbName","populateEnumFile","save"],"mappings":"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"}
\ No newline at end of file
+{"version":3,"file":"zod-prisma.cjs.production.min.js","sources":["../src/config.ts","../src/util.ts","../src/docs.ts","../src/types.ts","../src/index.ts","../src/generator.ts"],"sourcesContent":["import { SemicolonPreference } from 'typescript';\nimport { z } from 'zod';\n\nconst configBoolean = z.enum(['true', 'false']).transform((arg) => JSON.parse(arg));\n\nexport const configSchema = z.object({\n  relationModel: configBoolean.default('true').or(z.literal('default')),\n  modelSuffix: z.string().default('Model'),\n  modelCase: z.enum(['PascalCase', 'camelCase']).default('PascalCase'),\n  useDecimalJs: configBoolean.default('false'),\n  imports: z.string().optional(),\n  prismaJsonNullability: configBoolean.default('true'),\n  fileNameCase: z.enum(['PascalCase', 'camelCase', 'snake_case']).default('PascalCase'),\n  enumFile: z.string().optional(),\n  zenum: configBoolean.default('false'),\n  zenumPrefix: z.string().default('z'),\n  indentSize: z.number().default(2),\n  indentType: z.enum(['tab', 'space']).default('space'),\n  singleQuote: configBoolean.default('false'),\n  semicolon: z.nativeEnum(SemicolonPreference).default(SemicolonPreference.Insert),\n  trailingCommas: configBoolean.default('true'),\n  ignoreRelationTypes: configBoolean.default('false').optional(),\n  dateTimeSchema: z.enum(['date', 'union', 'transform']).default('date'),\n  nullableType: z.enum(['nullish', 'nullable']).default('nullish'),\n});\n\nexport type Config = z.infer<typeof configSchema>;\n\nexport type PrismaOptions = {\n  schemaPath: string;\n  outputPath: string;\n  clientPath: string;\n};\n\nexport type Names = {\n  model: string;\n  related: string;\n};\n","import { DMMF } from '@prisma/generator-helper';\nimport type { CodeBlockWriter } from 'ts-morph';\nimport { Config } from './config';\n\nexport const writeArray = (writer: CodeBlockWriter, array: string[], newLine = true) =>\n  array.forEach((line) => writer.write(line).conditionalNewLine(newLine));\n\nexport const useModelNames = ({ modelCase, modelSuffix, relationModel }: Config) => {\n  const formatModelName = (name: string, prefix = '') => {\n    if (modelCase === 'camelCase') {\n      name = name.slice(0, 1).toLowerCase() + name.slice(1);\n    }\n    return `${prefix}${name}${modelSuffix}`;\n  };\n\n  return {\n    modelName: (name: string) => formatModelName(name, relationModel === 'default' ? '_' : ''),\n    relatedModelName: (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n      formatModelName(relationModel === 'default' ? name.toString() : `Related${name.toString()}`),\n  };\n};\n\nexport const needsRelatedModel = (model: DMMF.Model, config: Config) =>\n  model.fields.some((field) => field.kind === 'object') && config.relationModel !== false;\n\nexport const chunk = <T extends any[]>(input: T, size: number): T[] => {\n  return input.reduce((arr, item, idx) => {\n    return idx % size === 0 ? [...arr, [item]] : [...arr.slice(0, -1), [...arr.slice(-1)[0], item]];\n  }, []);\n};\n\nexport const dotSlash = (input: string) => {\n  const converted = input\n    .replace(/^\\\\\\\\\\?\\\\/, '')\n    .replace(/\\\\/g, '/')\n    .replace(/\\/\\/+/g, '/');\n\n  if (converted.includes(`/node_modules/`)) return converted.split(`/node_modules/`).slice(-1)[0];\n\n  if (converted.startsWith(`../`)) return converted;\n\n  return './' + converted;\n};\n\nexport const assertNever = (x: never): never => {\n  throw new Error(`Switch block is not exhaustive. Found: ${x}`);\n};\n","import { ArrayTree, parse, stringify } from 'parenthesis';\nimport { chunk } from './util';\n\nexport const getJSDocs = (docString?: string) => {\n  const lines: string[] = [];\n\n  if (docString) {\n    const docLines = docString.split('\\n').filter((dL) => !dL.trimStart().startsWith('@zod'));\n\n    if (docLines.length) {\n      lines.push('/**');\n      docLines.forEach((dL) => lines.push(` * ${dL}`));\n      lines.push(' */');\n    }\n  }\n\n  return lines;\n};\n\nexport const getZodDocElements = (docString: string) =>\n  docString\n    .split('\\n')\n    .filter((line) => line.trimStart().startsWith('@zod'))\n    .map((line) => line.trimStart().slice(4))\n    .flatMap((line) =>\n      // Array.from(line.matchAll(/\\.([^().]+\\(.*?\\))/g), (m) => m.slice(1)).flat()\n      chunk(parse(line), 2)\n        .slice(0, -1)\n        .map(\n          ([each, contents]) =>\n            (each as string).replace(/\\)?\\./, '') + `${stringify(contents as ArrayTree)})`\n        )\n    );\n\nexport const computeCustomSchema = (docString: string) => {\n  return getZodDocElements(docString)\n    .find((modifier) => modifier.startsWith('custom('))\n    ?.slice(7)\n    .slice(0, -1);\n};\n\nexport const computeModifiers = (docString: string) => {\n  return getZodDocElements(docString).filter((each) => !each.startsWith('custom('));\n};\n","import type { DMMF } from '@prisma/generator-helper';\nimport { z } from 'zod';\nimport { computeCustomSchema, computeModifiers } from './docs';\nimport { configSchema } from './config';\nimport { assertNever } from './util';\n\nexport const getZodConstructor = ({\n  field,\n  dateType,\n  nullableType,\n  getRelatedModelName = (name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg) =>\n    name.toString(),\n}: {\n  field: DMMF.Field;\n  dateType: z.infer<typeof configSchema.shape.dateTimeSchema>;\n  nullableType: 'nullable' | 'nullish';\n  getRelatedModelName?: (\n    name: string | DMMF.SchemaEnum | DMMF.OutputType | DMMF.SchemaArg\n  ) => string;\n}) => {\n  let zodType = 'z.unknown()';\n  let extraModifiers: string[] = [''];\n  if (field.kind === 'scalar') {\n    switch (field.type) {\n      case 'String':\n        zodType = 'z.string()';\n        break;\n      case 'Int':\n        zodType = 'z.number()';\n        extraModifiers.push('int()');\n        break;\n      case 'BigInt':\n        zodType = 'z.bigint()';\n        break;\n      case 'DateTime': {\n        switch (dateType) {\n          case 'date':\n            zodType = 'z.date()';\n            break;\n          case 'union':\n            zodType = 'z.union([z.date(), z.string().datetime()])';\n            break;\n          case 'transform':\n            zodType = 'z.date().transform((v) => v.toISOString()).pipe(z.string().datetime())';\n            break;\n          default:\n            assertNever(dateType);\n            break;\n        }\n        break;\n      }\n      case 'Float':\n        zodType = 'z.number()';\n        break;\n      case 'Decimal':\n        zodType = 'z.number()';\n        break;\n      case 'Json':\n        zodType = 'jsonSchema';\n        break;\n      case 'Boolean':\n        zodType = 'z.boolean()';\n        break;\n      // TODO: Proper type for bytes fields\n      case 'Bytes':\n        zodType = 'z.unknown()';\n        break;\n    }\n  } else if (field.kind === 'enum') {\n    zodType = `z.nativeEnum(${field.type})`;\n  } else if (field.kind === 'object') {\n    zodType = getRelatedModelName(field.type);\n  }\n\n  if (field.isList) extraModifiers.push('array()');\n  if (field.documentation) {\n    zodType = computeCustomSchema(field.documentation) ?? zodType;\n    extraModifiers.push(...computeModifiers(field.documentation));\n  }\n  if (!field.isRequired && field.type !== 'Json') {\n    switch (nullableType) {\n      case 'nullable':\n        extraModifiers.push('nullable()');\n        break;\n      case 'nullish':\n        extraModifiers.push('nullish()');\n        break;\n      default:\n        assertNever(nullableType);\n        break;\n    }\n  }\n  // if (field.hasDefaultValue) extraModifiers.push('optional()')\n\n  return `${zodType}${extraModifiers.join('.')}`;\n};\n","// @ts-ignore Importing package.json for automated synchronization of version numbers\nimport { version } from '../package.json';\n\nimport { generatorHandler } from '@prisma/generator-helper';\nimport { Project, QuoteKind } from 'ts-morph';\nimport { configSchema, PrismaOptions } from './config';\nimport { generateBarrelFile, populateEnumFile, populateEnumFileWitZodEnum, populateModelFile } from './generator';\n\ngeneratorHandler({\n  onManifest() {\n    return {\n      version,\n      prettyName: 'Zod Schemas',\n      defaultOutput: 'zod',\n    };\n  },\n  onGenerate(options) {\n    const models = options.dmmf.datamodel.models;\n\n    const { schemaPath } = options;\n    const outputPath = options.generator.output!.value!;\n    const clientPath = options.otherGenerators.find(\n      (each) => each.provider.value === 'prisma-client-js'\n    )!.output!.value!;\n\n    const results = configSchema.safeParse(options.generator.config);\n    if (!results.success)\n      throw new Error(\n        'Incorrect config provided. Please check the values you provided and try again.'\n      );\n\n    const config = results.data;\n    const prismaOptions: PrismaOptions = {\n      clientPath,\n      outputPath,\n      schemaPath,\n    };\n\n    const project = new Project({\n      manipulationSettings: {\n        quoteKind: config.singleQuote ? QuoteKind.Single : QuoteKind.Double,\n        useTrailingCommas: config.trailingCommas,\n      },\n    });\n\n    const indexFile = project.createSourceFile(`${outputPath}/index.ts`, {}, { overwrite: true });\n\n    generateBarrelFile(models, indexFile, config.enumFile);\n\n    indexFile.formatText({\n      indentSize: config.indentSize,\n      convertTabsToSpaces: config.indentType === 'space',\n      semicolons: config.semicolon,\n    });\n\n    models.forEach((model) => {\n      const sourceFile = project.createSourceFile(\n        `${outputPath}/${model.name}.ts`,\n        {},\n        { overwrite: true }\n      );\n\n      populateModelFile(model, sourceFile, config, prismaOptions);\n\n      sourceFile.formatText({\n        indentSize: config.indentSize,\n        convertTabsToSpaces: config.indentType === 'space',\n        semicolons: config.semicolon,\n      });\n    });\n\n    if (config.enumFile) {\n      const enums = options.dmmf.datamodel.enums;\n      const enumFile = project.createSourceFile(\n        `${outputPath}/${config.enumFile}.ts`,\n        {},\n        { overwrite: true }\n      );\n      populateEnumFile(enums, enumFile);\n      if (config.zenum)\n        populateEnumFileWitZodEnum(enums, enumFile, config.zenumPrefix)\n      enumFile.formatText({\n        indentSize: config.indentSize,\n        convertTabsToSpaces: config.indentType === 'space',\n        semicolons: config.semicolon,\n      });\n    }\n\n    return project.save();\n  },\n});\n","import { DMMF } from '@prisma/generator-helper';\nimport path from 'path';\nimport {\n  ImportDeclarationStructure,\n  SourceFile,\n  StructureKind,\n  VariableDeclarationKind,\n} from 'ts-morph';\nimport { Config, PrismaOptions } from './config';\nimport { getJSDocs } from './docs';\nimport { getZodConstructor } from './types';\nimport { dotSlash, needsRelatedModel, useModelNames, writeArray } from './util';\n\nexport const writeImportsForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  { schemaPath, outputPath, clientPath }: PrismaOptions\n) => {\n  const { relatedModelName } = useModelNames(config);\n  const importList: ImportDeclarationStructure[] = [\n    {\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['z'],\n      moduleSpecifier: 'zod',\n    },\n  ];\n\n  if (config.imports) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namespaceImport: 'imports',\n      moduleSpecifier: dotSlash(\n        path.relative(outputPath, path.resolve(path.dirname(schemaPath), config.imports))\n      ),\n    });\n  }\n\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      namedImports: ['Decimal'],\n      moduleSpecifier: 'decimal.js',\n    });\n  }\n\n  const enumFields = model.fields.filter((f) => f.kind === 'enum');\n  const relationFields = model.fields.filter((f) => f.kind === 'object');\n  const relativePath = path.relative(outputPath, clientPath);\n\n  if (enumFields.length > 0) {\n    importList.push({\n      kind: StructureKind.ImportDeclaration,\n      isTypeOnly: enumFields.length === 0,\n      moduleSpecifier: dotSlash(config.enumFile || relativePath),\n      namedImports: Array.from(new Set(enumFields.map((f) => f.type))),\n    });\n  }\n\n  if (config.relationModel !== false && relationFields.length > 0) {\n    const filteredFields = relationFields.filter((f) => f.type !== model.name);\n\n    if (filteredFields.length > 0) {\n      importList.push({\n        kind: StructureKind.ImportDeclaration,\n        moduleSpecifier: './index',\n        namedImports: Array.from(\n          new Set(\n            filteredFields.flatMap((f) => [\n              `Complete${f.type}Input`,\n              `Complete${f.type}Output`,\n              relatedModelName(f.type),\n            ])\n          )\n        ),\n      });\n    }\n  }\n\n  sourceFile.addImportDeclarations(importList);\n};\n\nexport const writeTypeSpecificSchemas = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  if (model.fields.some((f) => f.type === 'Json')) {\n    sourceFile.addStatements((writer) => {\n      writer.newLine();\n      writeArray(writer, [\n        '// Helper schema for JSON fields',\n        `type Literal = boolean | number | string${config.prismaJsonNullability ? '' : '| null'}`,\n        'type Json = Literal | { [key: string]: Json } | Json[]',\n        `const literalSchema = z.union([z.string(), z.number(), z.boolean()${\n          config.prismaJsonNullability ? '' : ', z.null()'\n        }])`,\n        'const jsonSchema: z.ZodSchema<Json> = z.lazy(() => z.union([literalSchema, z.array(jsonSchema), z.record(jsonSchema)]))',\n      ]);\n    });\n  }\n\n  if (config.useDecimalJs && model.fields.some((f) => f.type === 'Decimal')) {\n    sourceFile.addStatements((writer) => {\n      writer.newLine();\n      writeArray(writer, [\n        '// Helper schema for Decimal fields',\n        'z',\n        '.instanceof(Decimal)',\n        '.or(z.string())',\n        '.or(z.number())',\n        '.refine((value) => {',\n        '  try {',\n        '    return new Decimal(value);',\n        '  } catch (error) {',\n        '    return false;',\n        '  }',\n        '})',\n        '.transform((value) => new Decimal(value));',\n      ]);\n    });\n  }\n};\n\nexport const generateSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName } = useModelNames(config);\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n    declarations: [\n      {\n        name: modelName(model.name),\n        initializer(writer) {\n          writer\n            .write('z.object(')\n            .inlineBlock(() => {\n              model.fields\n                .filter((f) => f.kind !== 'object')\n                .forEach((field) => {\n                  writeArray(writer, getJSDocs(field.documentation));\n                  writer\n                    .write(\n                      `${field.name}: ${getZodConstructor({\n                        field,\n                        dateType: config.dateTimeSchema,\n                        nullableType: config.nullableType,\n                      })}`\n                    )\n                    .write(',')\n                    .newLine();\n                });\n            })\n            .write(')');\n        },\n      },\n    ],\n  });\n};\n\nexport const generateRelatedSchemaForModel = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  _prismaOptions: PrismaOptions\n) => {\n  const { modelName, relatedModelName } = useModelNames(config);\n\n  const relationFields = model.fields.filter((f) => f.kind === 'object');\n\n  sourceFile.addInterface({\n    name: `Complete${model.name}Input`,\n    isExported: true,\n    extends: [`z.input<typeof ${modelName(model.name)}>`],\n    properties: relationFields.map((f) => ({\n      hasQuestionToken: !f.isRequired,\n      name: f.name,\n      type: `Complete${f.type}Input${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n    })),\n  });\n\n  sourceFile.addInterface({\n    name: `Complete${model.name}Output`,\n    isExported: true,\n    extends: [`z.infer<typeof ${modelName(model.name)}>`],\n    properties: relationFields.map((f) => ({\n      hasQuestionToken: !f.isRequired,\n      name: f.name,\n      type: `Complete${f.type}Output${f.isList ? '[]' : ''}${!f.isRequired ? ' | null' : ''}`,\n    })),\n  });\n\n  sourceFile.addStatements((writer) => {\n    const comments = [\n      '',\n      '/**',\n      ` * ${relatedModelName(\n        model.name\n      )} contains all relations on your model in addition to the scalars`,\n      ' *',\n      ' * NOTE: Lazy required in case of potential circular dependencies within schema',\n      ' */',\n    ];\n\n    if (config.ignoreRelationTypes) comments.push('// @ts-ignore');\n    return writeArray(writer, comments);\n  });\n\n  sourceFile.addVariableStatement({\n    declarationKind: VariableDeclarationKind.Const,\n    isExported: true,\n    declarations: [\n      {\n        name: relatedModelName(model.name),\n        type: `z.ZodSchema<Complete${model.name}Output, z.ZodTypeDef, Complete${model.name}Input>`,\n        initializer(writer) {\n          writer\n            .write(`z.lazy(() => ${modelName(model.name)}.extend(`)\n            .inlineBlock(() => {\n              relationFields.forEach((field) => {\n                writeArray(writer, getJSDocs(field.documentation));\n\n                writer\n                  .write(\n                    `${field.name}: ${getZodConstructor({\n                      field,\n                      dateType: config.dateTimeSchema,\n                      nullableType: config.nullableType,\n                      getRelatedModelName: relatedModelName,\n                    })}`\n                  )\n                  .write(',')\n                  .newLine();\n              });\n            })\n            .write('))');\n        },\n      },\n    ],\n  });\n};\n\nexport const populateEnumFileWitZodEnum = (enums: DMMF.DatamodelEnum[], sourceFile: SourceFile, prefix: string) => {\n    sourceFile.addImportDeclaration({\n        kind: StructureKind.ImportDeclaration,\n        namedImports: ['z'],\n        moduleSpecifier: 'zod'\n    })\n\n    enums.forEach((enumModel) => {\n        sourceFile.addVariableStatement({\n          declarationKind: VariableDeclarationKind.Const,\n          isExported: true,\n          leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n          declarations: [\n            {\n                name: prefix + enumModel.name.at(0)?.toUpperCase() + enumModel.name.substring(1),\n                initializer(writer) {\n                    writer.write('z.enum([').newLine()\n                    writeArray(writer, enumModel.values.map(field => `\"${field.dbName || field.name}\",`), true)\n                    writer.write('])')\n              },\n            },\n          ],\n        });\n    })\n}\n\nexport const populateEnumFile = (enums: DMMF.DatamodelEnum[], sourceFile: SourceFile) => {\n  enums.forEach((enumModel) => {\n    sourceFile.addVariableStatement({\n      declarationKind: VariableDeclarationKind.Const,\n      isExported: true,\n      leadingTrivia: (writer) => writer.blankLineIfLastNot(),\n      declarations: [\n        {\n          name: enumModel.name,\n          initializer(writer) {\n            writer\n              .inlineBlock(() => {\n                enumModel.values.forEach((field) => {\n                  writer\n                    .write(`${field.name}: '${field.dbName || field.name}'`)\n                    .write(',')\n                    .newLine();\n                });\n              })\n              .write(' as const');\n          },\n        },\n      ],\n    });\n  });\n};\n\nexport const populateModelFile = (\n  model: DMMF.Model,\n  sourceFile: SourceFile,\n  config: Config,\n  prismaOptions: PrismaOptions\n) => {\n  writeImportsForModel(model, sourceFile, config, prismaOptions);\n  writeTypeSpecificSchemas(model, sourceFile, config, prismaOptions);\n  generateSchemaForModel(model, sourceFile, config, prismaOptions);\n  if (needsRelatedModel(model, config)) {\n    generateRelatedSchemaForModel(model, sourceFile, config, prismaOptions);\n  }\n};\n\nexport const generateBarrelFile = (\n  models: DMMF.Model[],\n  indexFile: SourceFile,\n  enumFile?: string | null\n) => {\n  models.forEach((model) =>\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${model.name}`,\n    })\n  );\n\n  if (enumFile) {\n    indexFile.addExportDeclaration({\n      moduleSpecifier: `./${enumFile}`,\n    });\n  }\n};\n"],"names":["configBoolean","z","enum","transform","arg","JSON","parse","configSchema","object","relationModel","default","or","literal","modelSuffix","string","modelCase","useDecimalJs","imports","optional","prismaJsonNullability","fileNameCase","enumFile","zenum","zenumPrefix","indentSize","number","indentType","singleQuote","semicolon","nativeEnum","SemicolonPreference","Insert","trailingCommas","ignoreRelationTypes","dateTimeSchema","nullableType","writeArray","writer","array","newLine","forEach","line","write","conditionalNewLine","useModelNames","formatModelName","name","prefix","slice","toLowerCase","modelName","relatedModelName","toString","dotSlash","input","converted","replace","includes","split","startsWith","assertNever","x","Error","getJSDocs","docString","lines","docLines","filter","dL","trimStart","length","push","getZodDocElements","map","flatMap","chunk","reduce","arr","item","idx","each","contents","stringify","getZodConstructor","field","dateType","getRelatedModelName","zodType","extraModifiers","kind","type","_computeCustomSchema","_getZodDocElements$fi","isList","documentation","find","modifier","isRequired","join","generatorHandler","onManifest","version","prettyName","defaultOutput","onGenerate","options","models","dmmf","datamodel","schemaPath","outputPath","generator","output","value","clientPath","otherGenerators","provider","results","safeParse","config","success","data","prismaOptions","project","Project","manipulationSettings","quoteKind","QuoteKind","Single","Double","useTrailingCommas","indexFile","createSourceFile","overwrite","model","addExportDeclaration","moduleSpecifier","generateBarrelFile","formatText","convertTabsToSpaces","semicolons","sourceFile","importList","StructureKind","ImportDeclaration","namedImports","namespaceImport","path","relative","resolve","dirname","fields","some","f","enumFields","relationFields","relativePath","isTypeOnly","Array","from","Set","filteredFields","addImportDeclarations","writeImportsForModel","_prismaOptions","addStatements","writeTypeSpecificSchemas","addVariableStatement","declarationKind","VariableDeclarationKind","Const","isExported","leadingTrivia","blankLineIfLastNot","declarations","initializer","inlineBlock","generateSchemaForModel","needsRelatedModel","addInterface","extends","properties","hasQuestionToken","comments","generateRelatedSchemaForModel","populateModelFile","enums","enumModel","values","dbName","populateEnumFile","addImportDeclaration","_enumModel$name$at","at","toUpperCase","substring","populateEnumFileWitZodEnum","save"],"mappings":"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"}